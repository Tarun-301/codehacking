/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/libs/bootstrap.js":
/*!****************************************!*\
  !*** ./resources/js/libs/bootstrap.js ***!
  \****************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * Bootstrap v3.3.4 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\nif (typeof jQuery === 'undefined') {\n  throw new Error('Bootstrap\\'s JavaScript requires jQuery');\n}\n\n+function ($) {\n  'use strict';\n\n  var version = $.fn.jquery.split(' ')[0].split('.');\n\n  if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1) {\n    throw new Error('Bootstrap\\'s JavaScript requires jQuery version 1.9.1 or higher');\n  }\n}(jQuery);\n/* ========================================================================\n * Bootstrap: transition.js v3.3.4\n * http://getbootstrap.com/javascript/#transitions\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\n  // ============================================================\n\n  function transitionEnd() {\n    var el = document.createElement('bootstrap');\n    var transEndEventNames = {\n      WebkitTransition: 'webkitTransitionEnd',\n      MozTransition: 'transitionend',\n      OTransition: 'oTransitionEnd otransitionend',\n      transition: 'transitionend'\n    };\n\n    for (var name in transEndEventNames) {\n      if (el.style[name] !== undefined) {\n        return {\n          end: transEndEventNames[name]\n        };\n      }\n    }\n\n    return false; // explicit for ie8 (  ._.)\n  } // http://blog.alexmaccaw.com/css-transitions\n\n\n  $.fn.emulateTransitionEnd = function (duration) {\n    var called = false;\n    var $el = this;\n    $(this).one('bsTransitionEnd', function () {\n      called = true;\n    });\n\n    var callback = function callback() {\n      if (!called) $($el).trigger($.support.transition.end);\n    };\n\n    setTimeout(callback, duration);\n    return this;\n  };\n\n  $(function () {\n    $.support.transition = transitionEnd();\n    if (!$.support.transition) return;\n    $.event.special.bsTransitionEnd = {\n      bindType: $.support.transition.end,\n      delegateType: $.support.transition.end,\n      handle: function handle(e) {\n        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);\n      }\n    };\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: alert.js v3.3.4\n * http://getbootstrap.com/javascript/#alerts\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // ALERT CLASS DEFINITION\n  // ======================\n\n  var dismiss = '[data-dismiss=\"alert\"]';\n\n  var Alert = function Alert(el) {\n    $(el).on('click', dismiss, this.close);\n  };\n\n  Alert.VERSION = '3.3.4';\n  Alert.TRANSITION_DURATION = 150;\n\n  Alert.prototype.close = function (e) {\n    var $this = $(this);\n    var selector = $this.attr('data-target');\n\n    if (!selector) {\n      selector = $this.attr('href');\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, ''); // strip for ie7\n    }\n\n    var $parent = $(selector);\n    if (e) e.preventDefault();\n\n    if (!$parent.length) {\n      $parent = $this.closest('.alert');\n    }\n\n    $parent.trigger(e = $.Event('close.bs.alert'));\n    if (e.isDefaultPrevented()) return;\n    $parent.removeClass('in');\n\n    function removeElement() {\n      // detach from parent, fire event then clean up data\n      $parent.detach().trigger('closed.bs.alert').remove();\n    }\n\n    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();\n  }; // ALERT PLUGIN DEFINITION\n  // =======================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.alert');\n      if (!data) $this.data('bs.alert', data = new Alert(this));\n      if (typeof option == 'string') data[option].call($this);\n    });\n  }\n\n  var old = $.fn.alert;\n  $.fn.alert = Plugin;\n  $.fn.alert.Constructor = Alert; // ALERT NO CONFLICT\n  // =================\n\n  $.fn.alert.noConflict = function () {\n    $.fn.alert = old;\n    return this;\n  }; // ALERT DATA-API\n  // ==============\n\n\n  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);\n}(jQuery);\n/* ========================================================================\n * Bootstrap: button.js v3.3.4\n * http://getbootstrap.com/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = function Button(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Button.DEFAULTS, options);\n    this.isLoading = false;\n  };\n\n  Button.VERSION = '3.3.4';\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  };\n\n  Button.prototype.setState = function (state) {\n    var d = 'disabled';\n    var $el = this.$element;\n    var val = $el.is('input') ? 'val' : 'html';\n    var data = $el.data();\n    state = state + 'Text';\n    if (data.resetText == null) $el.data('resetText', $el[val]()); // push to event loop to allow forms to submit\n\n    setTimeout($.proxy(function () {\n      $el[val](data[state] == null ? this.options[state] : data[state]);\n\n      if (state == 'loadingText') {\n        this.isLoading = true;\n        $el.addClass(d).attr(d, d);\n      } else if (this.isLoading) {\n        this.isLoading = false;\n        $el.removeClass(d).removeAttr(d);\n      }\n    }, this), 0);\n  };\n\n  Button.prototype.toggle = function () {\n    var changed = true;\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]');\n\n    if ($parent.length) {\n      var $input = this.$element.find('input');\n\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked') && this.$element.hasClass('active')) changed = false;else $parent.find('.active').removeClass('active');\n      }\n\n      if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change');\n    } else {\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'));\n    }\n\n    if (changed) this.$element.toggleClass('active');\n  }; // BUTTON PLUGIN DEFINITION\n  // ========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.button');\n      var options = _typeof(option) == 'object' && option;\n      if (!data) $this.data('bs.button', data = new Button(this, options));\n      if (option == 'toggle') data.toggle();else if (option) data.setState(option);\n    });\n  }\n\n  var old = $.fn.button;\n  $.fn.button = Plugin;\n  $.fn.button.Constructor = Button; // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old;\n    return this;\n  }; // BUTTON DATA-API\n  // ===============\n\n\n  $(document).on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n    var $btn = $(e.target);\n    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn');\n    Plugin.call($btn, 'toggle');\n    e.preventDefault();\n  }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n    $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: carousel.js v3.3.4\n * http://getbootstrap.com/javascript/#carousel\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // CAROUSEL CLASS DEFINITION\n  // =========================\n\n  var Carousel = function Carousel(element, options) {\n    this.$element = $(element);\n    this.$indicators = this.$element.find('.carousel-indicators');\n    this.options = options;\n    this.paused = null;\n    this.sliding = null;\n    this.interval = null;\n    this.$active = null;\n    this.$items = null;\n    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));\n    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));\n  };\n\n  Carousel.VERSION = '3.3.4';\n  Carousel.TRANSITION_DURATION = 600;\n  Carousel.DEFAULTS = {\n    interval: 5000,\n    pause: 'hover',\n    wrap: true,\n    keyboard: true\n  };\n\n  Carousel.prototype.keydown = function (e) {\n    if (/input|textarea/i.test(e.target.tagName)) return;\n\n    switch (e.which) {\n      case 37:\n        this.prev();\n        break;\n\n      case 39:\n        this.next();\n        break;\n\n      default:\n        return;\n    }\n\n    e.preventDefault();\n  };\n\n  Carousel.prototype.cycle = function (e) {\n    e || (this.paused = false);\n    this.interval && clearInterval(this.interval);\n    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));\n    return this;\n  };\n\n  Carousel.prototype.getItemIndex = function (item) {\n    this.$items = item.parent().children('.item');\n    return this.$items.index(item || this.$active);\n  };\n\n  Carousel.prototype.getItemForDirection = function (direction, active) {\n    var activeIndex = this.getItemIndex(active);\n    var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;\n    if (willWrap && !this.options.wrap) return active;\n    var delta = direction == 'prev' ? -1 : 1;\n    var itemIndex = (activeIndex + delta) % this.$items.length;\n    return this.$items.eq(itemIndex);\n  };\n\n  Carousel.prototype.to = function (pos) {\n    var that = this;\n    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));\n    if (pos > this.$items.length - 1 || pos < 0) return;\n    if (this.sliding) return this.$element.one('slid.bs.carousel', function () {\n      that.to(pos);\n    }); // yes, \"slid\"\n\n    if (activeIndex == pos) return this.pause().cycle();\n    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));\n  };\n\n  Carousel.prototype.pause = function (e) {\n    e || (this.paused = true);\n\n    if (this.$element.find('.next, .prev').length && $.support.transition) {\n      this.$element.trigger($.support.transition.end);\n      this.cycle(true);\n    }\n\n    this.interval = clearInterval(this.interval);\n    return this;\n  };\n\n  Carousel.prototype.next = function () {\n    if (this.sliding) return;\n    return this.slide('next');\n  };\n\n  Carousel.prototype.prev = function () {\n    if (this.sliding) return;\n    return this.slide('prev');\n  };\n\n  Carousel.prototype.slide = function (type, next) {\n    var $active = this.$element.find('.item.active');\n    var $next = next || this.getItemForDirection(type, $active);\n    var isCycling = this.interval;\n    var direction = type == 'next' ? 'left' : 'right';\n    var that = this;\n    if ($next.hasClass('active')) return this.sliding = false;\n    var relatedTarget = $next[0];\n    var slideEvent = $.Event('slide.bs.carousel', {\n      relatedTarget: relatedTarget,\n      direction: direction\n    });\n    this.$element.trigger(slideEvent);\n    if (slideEvent.isDefaultPrevented()) return;\n    this.sliding = true;\n    isCycling && this.pause();\n\n    if (this.$indicators.length) {\n      this.$indicators.find('.active').removeClass('active');\n      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);\n      $nextIndicator && $nextIndicator.addClass('active');\n    }\n\n    var slidEvent = $.Event('slid.bs.carousel', {\n      relatedTarget: relatedTarget,\n      direction: direction\n    }); // yes, \"slid\"\n\n    if ($.support.transition && this.$element.hasClass('slide')) {\n      $next.addClass(type);\n      $next[0].offsetWidth; // force reflow\n\n      $active.addClass(direction);\n      $next.addClass(direction);\n      $active.one('bsTransitionEnd', function () {\n        $next.removeClass([type, direction].join(' ')).addClass('active');\n        $active.removeClass(['active', direction].join(' '));\n        that.sliding = false;\n        setTimeout(function () {\n          that.$element.trigger(slidEvent);\n        }, 0);\n      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);\n    } else {\n      $active.removeClass('active');\n      $next.addClass('active');\n      this.sliding = false;\n      this.$element.trigger(slidEvent);\n    }\n\n    isCycling && this.cycle();\n    return this;\n  }; // CAROUSEL PLUGIN DEFINITION\n  // ==========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.carousel');\n      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), _typeof(option) == 'object' && option);\n      var action = typeof option == 'string' ? option : options.slide;\n      if (!data) $this.data('bs.carousel', data = new Carousel(this, options));\n      if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();\n    });\n  }\n\n  var old = $.fn.carousel;\n  $.fn.carousel = Plugin;\n  $.fn.carousel.Constructor = Carousel; // CAROUSEL NO CONFLICT\n  // ====================\n\n  $.fn.carousel.noConflict = function () {\n    $.fn.carousel = old;\n    return this;\n  }; // CAROUSEL DATA-API\n  // =================\n\n\n  var clickHandler = function clickHandler(e) {\n    var href;\n    var $this = $(this);\n    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')); // strip for ie7\n\n    if (!$target.hasClass('carousel')) return;\n    var options = $.extend({}, $target.data(), $this.data());\n    var slideIndex = $this.attr('data-slide-to');\n    if (slideIndex) options.interval = false;\n    Plugin.call($target, options);\n\n    if (slideIndex) {\n      $target.data('bs.carousel').to(slideIndex);\n    }\n\n    e.preventDefault();\n  };\n\n  $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);\n  $(window).on('load', function () {\n    $('[data-ride=\"carousel\"]').each(function () {\n      var $carousel = $(this);\n      Plugin.call($carousel, $carousel.data());\n    });\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: collapse.js v3.3.4\n * http://getbootstrap.com/javascript/#collapse\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // COLLAPSE PUBLIC CLASS DEFINITION\n  // ================================\n\n  var Collapse = function Collapse(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Collapse.DEFAULTS, options);\n    this.$trigger = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' + '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]');\n    this.transitioning = null;\n\n    if (this.options.parent) {\n      this.$parent = this.getParent();\n    } else {\n      this.addAriaAndCollapsedClass(this.$element, this.$trigger);\n    }\n\n    if (this.options.toggle) this.toggle();\n  };\n\n  Collapse.VERSION = '3.3.4';\n  Collapse.TRANSITION_DURATION = 350;\n  Collapse.DEFAULTS = {\n    toggle: true\n  };\n\n  Collapse.prototype.dimension = function () {\n    var hasWidth = this.$element.hasClass('width');\n    return hasWidth ? 'width' : 'height';\n  };\n\n  Collapse.prototype.show = function () {\n    if (this.transitioning || this.$element.hasClass('in')) return;\n    var activesData;\n    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');\n\n    if (actives && actives.length) {\n      activesData = actives.data('bs.collapse');\n      if (activesData && activesData.transitioning) return;\n    }\n\n    var startEvent = $.Event('show.bs.collapse');\n    this.$element.trigger(startEvent);\n    if (startEvent.isDefaultPrevented()) return;\n\n    if (actives && actives.length) {\n      Plugin.call(actives, 'hide');\n      activesData || actives.data('bs.collapse', null);\n    }\n\n    var dimension = this.dimension();\n    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);\n    this.$trigger.removeClass('collapsed').attr('aria-expanded', true);\n    this.transitioning = 1;\n\n    var complete = function complete() {\n      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');\n      this.transitioning = 0;\n      this.$element.trigger('shown.bs.collapse');\n    };\n\n    if (!$.support.transition) return complete.call(this);\n    var scrollSize = $.camelCase(['scroll', dimension].join('-'));\n    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);\n  };\n\n  Collapse.prototype.hide = function () {\n    if (this.transitioning || !this.$element.hasClass('in')) return;\n    var startEvent = $.Event('hide.bs.collapse');\n    this.$element.trigger(startEvent);\n    if (startEvent.isDefaultPrevented()) return;\n    var dimension = this.dimension();\n    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;\n    this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);\n    this.$trigger.addClass('collapsed').attr('aria-expanded', false);\n    this.transitioning = 1;\n\n    var complete = function complete() {\n      this.transitioning = 0;\n      this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');\n    };\n\n    if (!$.support.transition) return complete.call(this);\n    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);\n  };\n\n  Collapse.prototype.toggle = function () {\n    this[this.$element.hasClass('in') ? 'hide' : 'show']();\n  };\n\n  Collapse.prototype.getParent = function () {\n    return $(this.options.parent).find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]').each($.proxy(function (i, element) {\n      var $element = $(element);\n      this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);\n    }, this)).end();\n  };\n\n  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\n    var isOpen = $element.hasClass('in');\n    $element.attr('aria-expanded', isOpen);\n    $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);\n  };\n\n  function getTargetFromTrigger($trigger) {\n    var href;\n    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, ''); // strip for ie7\n\n    return $(target);\n  } // COLLAPSE PLUGIN DEFINITION\n  // ==========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.collapse');\n      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), _typeof(option) == 'object' && option);\n      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false;\n      if (!data) $this.data('bs.collapse', data = new Collapse(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.collapse;\n  $.fn.collapse = Plugin;\n  $.fn.collapse.Constructor = Collapse; // COLLAPSE NO CONFLICT\n  // ====================\n\n  $.fn.collapse.noConflict = function () {\n    $.fn.collapse = old;\n    return this;\n  }; // COLLAPSE DATA-API\n  // =================\n\n\n  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\n    var $this = $(this);\n    if (!$this.attr('data-target')) e.preventDefault();\n    var $target = getTargetFromTrigger($this);\n    var data = $target.data('bs.collapse');\n    var option = data ? 'toggle' : $this.data();\n    Plugin.call($target, option);\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: dropdown.js v3.3.4\n * http://getbootstrap.com/javascript/#dropdowns\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // DROPDOWN CLASS DEFINITION\n  // =========================\n\n  var backdrop = '.dropdown-backdrop';\n  var toggle = '[data-toggle=\"dropdown\"]';\n\n  var Dropdown = function Dropdown(element) {\n    $(element).on('click.bs.dropdown', this.toggle);\n  };\n\n  Dropdown.VERSION = '3.3.4';\n\n  Dropdown.prototype.toggle = function (e) {\n    var $this = $(this);\n    if ($this.is('.disabled, :disabled')) return;\n    var $parent = getParent($this);\n    var isActive = $parent.hasClass('open');\n    clearMenus();\n\n    if (!isActive) {\n      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\n        // if mobile we use a backdrop because click events don't delegate\n        $('<div class=\"dropdown-backdrop\"/>').insertAfter($(this)).on('click', clearMenus);\n      }\n\n      var relatedTarget = {\n        relatedTarget: this\n      };\n      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));\n      if (e.isDefaultPrevented()) return;\n      $this.trigger('focus').attr('aria-expanded', 'true');\n      $parent.toggleClass('open').trigger('shown.bs.dropdown', relatedTarget);\n    }\n\n    return false;\n  };\n\n  Dropdown.prototype.keydown = function (e) {\n    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;\n    var $this = $(this);\n    e.preventDefault();\n    e.stopPropagation();\n    if ($this.is('.disabled, :disabled')) return;\n    var $parent = getParent($this);\n    var isActive = $parent.hasClass('open');\n\n    if (!isActive && e.which != 27 || isActive && e.which == 27) {\n      if (e.which == 27) $parent.find(toggle).trigger('focus');\n      return $this.trigger('click');\n    }\n\n    var desc = ' li:not(.disabled):visible a';\n    var $items = $parent.find('[role=\"menu\"]' + desc + ', [role=\"listbox\"]' + desc);\n    if (!$items.length) return;\n    var index = $items.index(e.target);\n    if (e.which == 38 && index > 0) index--; // up\n\n    if (e.which == 40 && index < $items.length - 1) index++; // down\n\n    if (!~index) index = 0;\n    $items.eq(index).trigger('focus');\n  };\n\n  function clearMenus(e) {\n    if (e && e.which === 3) return;\n    $(backdrop).remove();\n    $(toggle).each(function () {\n      var $this = $(this);\n      var $parent = getParent($this);\n      var relatedTarget = {\n        relatedTarget: this\n      };\n      if (!$parent.hasClass('open')) return;\n      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));\n      if (e.isDefaultPrevented()) return;\n      $this.attr('aria-expanded', 'false');\n      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget);\n    });\n  }\n\n  function getParent($this) {\n    var selector = $this.attr('data-target');\n\n    if (!selector) {\n      selector = $this.attr('href');\n      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, ''); // strip for ie7\n    }\n\n    var $parent = selector && $(selector);\n    return $parent && $parent.length ? $parent : $this.parent();\n  } // DROPDOWN PLUGIN DEFINITION\n  // ==========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.dropdown');\n      if (!data) $this.data('bs.dropdown', data = new Dropdown(this));\n      if (typeof option == 'string') data[option].call($this);\n    });\n  }\n\n  var old = $.fn.dropdown;\n  $.fn.dropdown = Plugin;\n  $.fn.dropdown.Constructor = Dropdown; // DROPDOWN NO CONFLICT\n  // ====================\n\n  $.fn.dropdown.noConflict = function () {\n    $.fn.dropdown = old;\n    return this;\n  }; // APPLY TO STANDARD DROPDOWN ELEMENTS\n  // ===================================\n\n\n  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {\n    e.stopPropagation();\n  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '[role=\"menu\"]', Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '[role=\"listbox\"]', Dropdown.prototype.keydown);\n}(jQuery);\n/* ========================================================================\n * Bootstrap: modal.js v3.3.4\n * http://getbootstrap.com/javascript/#modals\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // MODAL CLASS DEFINITION\n  // ======================\n\n  var Modal = function Modal(element, options) {\n    this.options = options;\n    this.$body = $(document.body);\n    this.$element = $(element);\n    this.$dialog = this.$element.find('.modal-dialog');\n    this.$backdrop = null;\n    this.isShown = null;\n    this.originalBodyPad = null;\n    this.scrollbarWidth = 0;\n    this.ignoreBackdropClick = false;\n\n    if (this.options.remote) {\n      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {\n        this.$element.trigger('loaded.bs.modal');\n      }, this));\n    }\n  };\n\n  Modal.VERSION = '3.3.4';\n  Modal.TRANSITION_DURATION = 300;\n  Modal.BACKDROP_TRANSITION_DURATION = 150;\n  Modal.DEFAULTS = {\n    backdrop: true,\n    keyboard: true,\n    show: true\n  };\n\n  Modal.prototype.toggle = function (_relatedTarget) {\n    return this.isShown ? this.hide() : this.show(_relatedTarget);\n  };\n\n  Modal.prototype.show = function (_relatedTarget) {\n    var that = this;\n    var e = $.Event('show.bs.modal', {\n      relatedTarget: _relatedTarget\n    });\n    this.$element.trigger(e);\n    if (this.isShown || e.isDefaultPrevented()) return;\n    this.isShown = true;\n    this.checkScrollbar();\n    this.setScrollbar();\n    this.$body.addClass('modal-open');\n    this.escape();\n    this.resize();\n    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this));\n    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\n      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\n        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;\n      });\n    });\n    this.backdrop(function () {\n      var transition = $.support.transition && that.$element.hasClass('fade');\n\n      if (!that.$element.parent().length) {\n        that.$element.appendTo(that.$body); // don't move modals dom position\n      }\n\n      that.$element.show().scrollTop(0);\n      that.adjustDialog();\n\n      if (transition) {\n        that.$element[0].offsetWidth; // force reflow\n      }\n\n      that.$element.addClass('in').attr('aria-hidden', false);\n      that.enforceFocus();\n      var e = $.Event('shown.bs.modal', {\n        relatedTarget: _relatedTarget\n      });\n      transition ? that.$dialog // wait for modal to slide in\n      .one('bsTransitionEnd', function () {\n        that.$element.trigger('focus').trigger(e);\n      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);\n    });\n  };\n\n  Modal.prototype.hide = function (e) {\n    if (e) e.preventDefault();\n    e = $.Event('hide.bs.modal');\n    this.$element.trigger(e);\n    if (!this.isShown || e.isDefaultPrevented()) return;\n    this.isShown = false;\n    this.escape();\n    this.resize();\n    $(document).off('focusin.bs.modal');\n    this.$element.removeClass('in').attr('aria-hidden', true).off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');\n    this.$dialog.off('mousedown.dismiss.bs.modal');\n    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();\n  };\n\n  Modal.prototype.enforceFocus = function () {\n    $(document).off('focusin.bs.modal') // guard against infinite focus loop\n    .on('focusin.bs.modal', $.proxy(function (e) {\n      if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {\n        this.$element.trigger('focus');\n      }\n    }, this));\n  };\n\n  Modal.prototype.escape = function () {\n    if (this.isShown && this.options.keyboard) {\n      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\n        e.which == 27 && this.hide();\n      }, this));\n    } else if (!this.isShown) {\n      this.$element.off('keydown.dismiss.bs.modal');\n    }\n  };\n\n  Modal.prototype.resize = function () {\n    if (this.isShown) {\n      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));\n    } else {\n      $(window).off('resize.bs.modal');\n    }\n  };\n\n  Modal.prototype.hideModal = function () {\n    var that = this;\n    this.$element.hide();\n    this.backdrop(function () {\n      that.$body.removeClass('modal-open');\n      that.resetAdjustments();\n      that.resetScrollbar();\n      that.$element.trigger('hidden.bs.modal');\n    });\n  };\n\n  Modal.prototype.removeBackdrop = function () {\n    this.$backdrop && this.$backdrop.remove();\n    this.$backdrop = null;\n  };\n\n  Modal.prototype.backdrop = function (callback) {\n    var that = this;\n    var animate = this.$element.hasClass('fade') ? 'fade' : '';\n\n    if (this.isShown && this.options.backdrop) {\n      var doAnimate = $.support.transition && animate;\n      this.$backdrop = $('<div class=\"modal-backdrop ' + animate + '\" />').appendTo(this.$body);\n      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\n        if (this.ignoreBackdropClick) {\n          this.ignoreBackdropClick = false;\n          return;\n        }\n\n        if (e.target !== e.currentTarget) return;\n        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();\n      }, this));\n      if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow\n\n      this.$backdrop.addClass('in');\n      if (!callback) return;\n      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass('in');\n\n      var callbackRemove = function callbackRemove() {\n        that.removeBackdrop();\n        callback && callback();\n      };\n\n      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();\n    } else if (callback) {\n      callback();\n    }\n  }; // these following methods are used to handle overflowing modals\n\n\n  Modal.prototype.handleUpdate = function () {\n    this.adjustDialog();\n  };\n\n  Modal.prototype.adjustDialog = function () {\n    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;\n    this.$element.css({\n      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\n      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\n    });\n  };\n\n  Modal.prototype.resetAdjustments = function () {\n    this.$element.css({\n      paddingLeft: '',\n      paddingRight: ''\n    });\n  };\n\n  Modal.prototype.checkScrollbar = function () {\n    var fullWindowWidth = window.innerWidth;\n\n    if (!fullWindowWidth) {\n      // workaround for missing window.innerWidth in IE8\n      var documentElementRect = document.documentElement.getBoundingClientRect();\n      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n    }\n\n    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;\n    this.scrollbarWidth = this.measureScrollbar();\n  };\n\n  Modal.prototype.setScrollbar = function () {\n    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);\n    this.originalBodyPad = document.body.style.paddingRight || '';\n    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth);\n  };\n\n  Modal.prototype.resetScrollbar = function () {\n    this.$body.css('padding-right', this.originalBodyPad);\n  };\n\n  Modal.prototype.measureScrollbar = function () {\n    // thx walsh\n    var scrollDiv = document.createElement('div');\n    scrollDiv.className = 'modal-scrollbar-measure';\n    this.$body.append(scrollDiv);\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    this.$body[0].removeChild(scrollDiv);\n    return scrollbarWidth;\n  }; // MODAL PLUGIN DEFINITION\n  // =======================\n\n\n  function Plugin(option, _relatedTarget) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.modal');\n      var options = $.extend({}, Modal.DEFAULTS, $this.data(), _typeof(option) == 'object' && option);\n      if (!data) $this.data('bs.modal', data = new Modal(this, options));\n      if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);\n    });\n  }\n\n  var old = $.fn.modal;\n  $.fn.modal = Plugin;\n  $.fn.modal.Constructor = Modal; // MODAL NO CONFLICT\n  // =================\n\n  $.fn.modal.noConflict = function () {\n    $.fn.modal = old;\n    return this;\n  }; // MODAL DATA-API\n  // ==============\n\n\n  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\n    var $this = $(this);\n    var href = $this.attr('href');\n    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\\s]+$)/, '')); // strip for ie7\n\n    var option = $target.data('bs.modal') ? 'toggle' : $.extend({\n      remote: !/#/.test(href) && href\n    }, $target.data(), $this.data());\n    if ($this.is('a')) e.preventDefault();\n    $target.one('show.bs.modal', function (showEvent) {\n      if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown\n\n      $target.one('hidden.bs.modal', function () {\n        $this.is(':visible') && $this.trigger('focus');\n      });\n    });\n    Plugin.call($target, option, this);\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: tooltip.js v3.3.4\n * http://getbootstrap.com/javascript/#tooltip\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // TOOLTIP PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Tooltip = function Tooltip(element, options) {\n    this.type = null;\n    this.options = null;\n    this.enabled = null;\n    this.timeout = null;\n    this.hoverState = null;\n    this.$element = null;\n    this.init('tooltip', element, options);\n  };\n\n  Tooltip.VERSION = '3.3.4';\n  Tooltip.TRANSITION_DURATION = 150;\n  Tooltip.DEFAULTS = {\n    animation: true,\n    placement: 'top',\n    selector: false,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    container: false,\n    viewport: {\n      selector: 'body',\n      padding: 0\n    }\n  };\n\n  Tooltip.prototype.init = function (type, element, options) {\n    this.enabled = true;\n    this.type = type;\n    this.$element = $(element);\n    this.options = this.getOptions(options);\n    this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport);\n\n    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\n      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');\n    }\n\n    var triggers = this.options.trigger.split(' ');\n\n    for (var i = triggers.length; i--;) {\n      var trigger = triggers[i];\n\n      if (trigger == 'click') {\n        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));\n      } else if (trigger != 'manual') {\n        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';\n        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';\n        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));\n        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));\n      }\n    }\n\n    this.options.selector ? this._options = $.extend({}, this.options, {\n      trigger: 'manual',\n      selector: ''\n    }) : this.fixTitle();\n  };\n\n  Tooltip.prototype.getDefaults = function () {\n    return Tooltip.DEFAULTS;\n  };\n\n  Tooltip.prototype.getOptions = function (options) {\n    options = $.extend({}, this.getDefaults(), this.$element.data(), options);\n\n    if (options.delay && typeof options.delay == 'number') {\n      options.delay = {\n        show: options.delay,\n        hide: options.delay\n      };\n    }\n\n    return options;\n  };\n\n  Tooltip.prototype.getDelegateOptions = function () {\n    var options = {};\n    var defaults = this.getDefaults();\n    this._options && $.each(this._options, function (key, value) {\n      if (defaults[key] != value) options[key] = value;\n    });\n    return options;\n  };\n\n  Tooltip.prototype.enter = function (obj) {\n    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);\n\n    if (self && self.$tip && self.$tip.is(':visible')) {\n      self.hoverState = 'in';\n      return;\n    }\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());\n      $(obj.currentTarget).data('bs.' + this.type, self);\n    }\n\n    clearTimeout(self.timeout);\n    self.hoverState = 'in';\n    if (!self.options.delay || !self.options.delay.show) return self.show();\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'in') self.show();\n    }, self.options.delay.show);\n  };\n\n  Tooltip.prototype.leave = function (obj) {\n    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());\n      $(obj.currentTarget).data('bs.' + this.type, self);\n    }\n\n    clearTimeout(self.timeout);\n    self.hoverState = 'out';\n    if (!self.options.delay || !self.options.delay.hide) return self.hide();\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'out') self.hide();\n    }, self.options.delay.hide);\n  };\n\n  Tooltip.prototype.show = function () {\n    var e = $.Event('show.bs.' + this.type);\n\n    if (this.hasContent() && this.enabled) {\n      this.$element.trigger(e);\n      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);\n      if (e.isDefaultPrevented() || !inDom) return;\n      var that = this;\n      var $tip = this.tip();\n      var tipId = this.getUID(this.type);\n      this.setContent();\n      $tip.attr('id', tipId);\n      this.$element.attr('aria-describedby', tipId);\n      if (this.options.animation) $tip.addClass('fade');\n      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;\n      var autoToken = /\\s?auto?\\s?/i;\n      var autoPlace = autoToken.test(placement);\n      if (autoPlace) placement = placement.replace(autoToken, '') || 'top';\n      $tip.detach().css({\n        top: 0,\n        left: 0,\n        display: 'block'\n      }).addClass(placement).data('bs.' + this.type, this);\n      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);\n      var pos = this.getPosition();\n      var actualWidth = $tip[0].offsetWidth;\n      var actualHeight = $tip[0].offsetHeight;\n\n      if (autoPlace) {\n        var orgPlacement = placement;\n        var $container = this.options.container ? $(this.options.container) : this.$element.parent();\n        var containerDim = this.getPosition($container);\n        placement = placement == 'bottom' && pos.bottom + actualHeight > containerDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < containerDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > containerDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < containerDim.left ? 'right' : placement;\n        $tip.removeClass(orgPlacement).addClass(placement);\n      }\n\n      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\n      this.applyPlacement(calculatedOffset, placement);\n\n      var complete = function complete() {\n        var prevHoverState = that.hoverState;\n        that.$element.trigger('shown.bs.' + that.type);\n        that.hoverState = null;\n        if (prevHoverState == 'out') that.leave(that);\n      };\n\n      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();\n    }\n  };\n\n  Tooltip.prototype.applyPlacement = function (offset, placement) {\n    var $tip = this.tip();\n    var width = $tip[0].offsetWidth;\n    var height = $tip[0].offsetHeight; // manually read margins because getBoundingClientRect includes difference\n\n    var marginTop = parseInt($tip.css('margin-top'), 10);\n    var marginLeft = parseInt($tip.css('margin-left'), 10); // we must check for NaN for ie 8/9\n\n    if (isNaN(marginTop)) marginTop = 0;\n    if (isNaN(marginLeft)) marginLeft = 0;\n    offset.top = offset.top + marginTop;\n    offset.left = offset.left + marginLeft; // $.fn.offset doesn't round pixel values\n    // so we use setOffset directly with our own function B-0\n\n    $.offset.setOffset($tip[0], $.extend({\n      using: function using(props) {\n        $tip.css({\n          top: Math.round(props.top),\n          left: Math.round(props.left)\n        });\n      }\n    }, offset), 0);\n    $tip.addClass('in'); // check to see if placing tip in new offset caused the tip to resize itself\n\n    var actualWidth = $tip[0].offsetWidth;\n    var actualHeight = $tip[0].offsetHeight;\n\n    if (placement == 'top' && actualHeight != height) {\n      offset.top = offset.top + height - actualHeight;\n    }\n\n    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n    if (delta.left) offset.left += delta.left;else offset.top += delta.top;\n    var isVertical = /top|bottom/.test(placement);\n    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n    $tip.offset(offset);\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);\n  };\n\n  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\n    this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');\n  };\n\n  Tooltip.prototype.setContent = function () {\n    var $tip = this.tip();\n    var title = this.getTitle();\n    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);\n    $tip.removeClass('fade in top bottom left right');\n  };\n\n  Tooltip.prototype.hide = function (callback) {\n    var that = this;\n    var $tip = $(this.$tip);\n    var e = $.Event('hide.bs.' + this.type);\n\n    function complete() {\n      if (that.hoverState != 'in') $tip.detach();\n      that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);\n      callback && callback();\n    }\n\n    this.$element.trigger(e);\n    if (e.isDefaultPrevented()) return;\n    $tip.removeClass('in');\n    $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();\n    this.hoverState = null;\n    return this;\n  };\n\n  Tooltip.prototype.fixTitle = function () {\n    var $e = this.$element;\n\n    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\n      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');\n    }\n  };\n\n  Tooltip.prototype.hasContent = function () {\n    return this.getTitle();\n  };\n\n  Tooltip.prototype.getPosition = function ($element) {\n    $element = $element || this.$element;\n    var el = $element[0];\n    var isBody = el.tagName == 'BODY';\n    var elRect = el.getBoundingClientRect();\n\n    if (elRect.width == null) {\n      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n      elRect = $.extend({}, elRect, {\n        width: elRect.right - elRect.left,\n        height: elRect.bottom - elRect.top\n      });\n    }\n\n    var elOffset = isBody ? {\n      top: 0,\n      left: 0\n    } : $element.offset();\n    var scroll = {\n      scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()\n    };\n    var outerDims = isBody ? {\n      width: $(window).width(),\n      height: $(window).height()\n    } : null;\n    return $.extend({}, elRect, scroll, outerDims, elOffset);\n  };\n\n  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\n    return placement == 'bottom' ? {\n      top: pos.top + pos.height,\n      left: pos.left + pos.width / 2 - actualWidth / 2\n    } : placement == 'top' ? {\n      top: pos.top - actualHeight,\n      left: pos.left + pos.width / 2 - actualWidth / 2\n    } : placement == 'left' ? {\n      top: pos.top + pos.height / 2 - actualHeight / 2,\n      left: pos.left - actualWidth\n    } :\n    /* placement == 'right' */\n    {\n      top: pos.top + pos.height / 2 - actualHeight / 2,\n      left: pos.left + pos.width\n    };\n  };\n\n  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\n    var delta = {\n      top: 0,\n      left: 0\n    };\n    if (!this.$viewport) return delta;\n    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;\n    var viewportDimensions = this.getPosition(this.$viewport);\n\n    if (/right|left/.test(placement)) {\n      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;\n      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n\n      if (topEdgeOffset < viewportDimensions.top) {\n        // top overflow\n        delta.top = viewportDimensions.top - topEdgeOffset;\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {\n        // bottom overflow\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n      }\n    } else {\n      var leftEdgeOffset = pos.left - viewportPadding;\n      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;\n\n      if (leftEdgeOffset < viewportDimensions.left) {\n        // left overflow\n        delta.left = viewportDimensions.left - leftEdgeOffset;\n      } else if (rightEdgeOffset > viewportDimensions.width) {\n        // right overflow\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n      }\n    }\n\n    return delta;\n  };\n\n  Tooltip.prototype.getTitle = function () {\n    var title;\n    var $e = this.$element;\n    var o = this.options;\n    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);\n    return title;\n  };\n\n  Tooltip.prototype.getUID = function (prefix) {\n    do {\n      prefix += ~~(Math.random() * 1000000);\n    } while (document.getElementById(prefix));\n\n    return prefix;\n  };\n\n  Tooltip.prototype.tip = function () {\n    return this.$tip = this.$tip || $(this.options.template);\n  };\n\n  Tooltip.prototype.arrow = function () {\n    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');\n  };\n\n  Tooltip.prototype.enable = function () {\n    this.enabled = true;\n  };\n\n  Tooltip.prototype.disable = function () {\n    this.enabled = false;\n  };\n\n  Tooltip.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled;\n  };\n\n  Tooltip.prototype.toggle = function (e) {\n    var self = this;\n\n    if (e) {\n      self = $(e.currentTarget).data('bs.' + this.type);\n\n      if (!self) {\n        self = new this.constructor(e.currentTarget, this.getDelegateOptions());\n        $(e.currentTarget).data('bs.' + this.type, self);\n      }\n    }\n\n    self.tip().hasClass('in') ? self.leave(self) : self.enter(self);\n  };\n\n  Tooltip.prototype.destroy = function () {\n    var that = this;\n    clearTimeout(this.timeout);\n    this.hide(function () {\n      that.$element.off('.' + that.type).removeData('bs.' + that.type);\n    });\n  }; // TOOLTIP PLUGIN DEFINITION\n  // =========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.tooltip');\n      var options = _typeof(option) == 'object' && option;\n      if (!data && /destroy|hide/.test(option)) return;\n      if (!data) $this.data('bs.tooltip', data = new Tooltip(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.tooltip;\n  $.fn.tooltip = Plugin;\n  $.fn.tooltip.Constructor = Tooltip; // TOOLTIP NO CONFLICT\n  // ===================\n\n  $.fn.tooltip.noConflict = function () {\n    $.fn.tooltip = old;\n    return this;\n  };\n}(jQuery);\n/* ========================================================================\n * Bootstrap: popover.js v3.3.4\n * http://getbootstrap.com/javascript/#popovers\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // POPOVER PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Popover = function Popover(element, options) {\n    this.init('popover', element, options);\n  };\n\n  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');\n  Popover.VERSION = '3.3.4';\n  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  }); // NOTE: POPOVER EXTENDS tooltip.js\n  // ================================\n\n  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);\n  Popover.prototype.constructor = Popover;\n\n  Popover.prototype.getDefaults = function () {\n    return Popover.DEFAULTS;\n  };\n\n  Popover.prototype.setContent = function () {\n    var $tip = this.tip();\n    var title = this.getTitle();\n    var content = this.getContent();\n    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);\n    $tip.find('.popover-content').children().detach().end()[// we use append for html objects to maintain js events\n    this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);\n    $tip.removeClass('fade top bottom left right in'); // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n    // this manually by checking the contents.\n\n    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();\n  };\n\n  Popover.prototype.hasContent = function () {\n    return this.getTitle() || this.getContent();\n  };\n\n  Popover.prototype.getContent = function () {\n    var $e = this.$element;\n    var o = this.options;\n    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);\n  };\n\n  Popover.prototype.arrow = function () {\n    return this.$arrow = this.$arrow || this.tip().find('.arrow');\n  }; // POPOVER PLUGIN DEFINITION\n  // =========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.popover');\n      var options = _typeof(option) == 'object' && option;\n      if (!data && /destroy|hide/.test(option)) return;\n      if (!data) $this.data('bs.popover', data = new Popover(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.popover;\n  $.fn.popover = Plugin;\n  $.fn.popover.Constructor = Popover; // POPOVER NO CONFLICT\n  // ===================\n\n  $.fn.popover.noConflict = function () {\n    $.fn.popover = old;\n    return this;\n  };\n}(jQuery);\n/* ========================================================================\n * Bootstrap: scrollspy.js v3.3.4\n * http://getbootstrap.com/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  function ScrollSpy(element, options) {\n    this.$body = $(document.body);\n    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);\n    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);\n    this.selector = (this.options.target || '') + ' .nav li > a';\n    this.offsets = [];\n    this.targets = [];\n    this.activeTarget = null;\n    this.scrollHeight = 0;\n    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));\n    this.refresh();\n    this.process();\n  }\n\n  ScrollSpy.VERSION = '3.3.4';\n  ScrollSpy.DEFAULTS = {\n    offset: 10\n  };\n\n  ScrollSpy.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);\n  };\n\n  ScrollSpy.prototype.refresh = function () {\n    var that = this;\n    var offsetMethod = 'offset';\n    var offsetBase = 0;\n    this.offsets = [];\n    this.targets = [];\n    this.scrollHeight = this.getScrollHeight();\n\n    if (!$.isWindow(this.$scrollElement[0])) {\n      offsetMethod = 'position';\n      offsetBase = this.$scrollElement.scrollTop();\n    }\n\n    this.$body.find(this.selector).map(function () {\n      var $el = $(this);\n      var href = $el.data('target') || $el.attr('href');\n      var $href = /^#./.test(href) && $(href);\n      return $href && $href.length && $href.is(':visible') && [[$href[offsetMethod]().top + offsetBase, href]] || null;\n    }).sort(function (a, b) {\n      return a[0] - b[0];\n    }).each(function () {\n      that.offsets.push(this[0]);\n      that.targets.push(this[1]);\n    });\n  };\n\n  ScrollSpy.prototype.process = function () {\n    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;\n    var scrollHeight = this.getScrollHeight();\n    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();\n    var offsets = this.offsets;\n    var targets = this.targets;\n    var activeTarget = this.activeTarget;\n    var i;\n\n    if (this.scrollHeight != scrollHeight) {\n      this.refresh();\n    }\n\n    if (scrollTop >= maxScroll) {\n      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);\n    }\n\n    if (activeTarget && scrollTop < offsets[0]) {\n      this.activeTarget = null;\n      return this.clear();\n    }\n\n    for (i = offsets.length; i--;) {\n      activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);\n    }\n  };\n\n  ScrollSpy.prototype.activate = function (target) {\n    this.activeTarget = target;\n    this.clear();\n    var selector = this.selector + '[data-target=\"' + target + '\"],' + this.selector + '[href=\"' + target + '\"]';\n    var active = $(selector).parents('li').addClass('active');\n\n    if (active.parent('.dropdown-menu').length) {\n      active = active.closest('li.dropdown').addClass('active');\n    }\n\n    active.trigger('activate.bs.scrollspy');\n  };\n\n  ScrollSpy.prototype.clear = function () {\n    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');\n  }; // SCROLLSPY PLUGIN DEFINITION\n  // ===========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.scrollspy');\n      var options = _typeof(option) == 'object' && option;\n      if (!data) $this.data('bs.scrollspy', data = new ScrollSpy(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.scrollspy;\n  $.fn.scrollspy = Plugin;\n  $.fn.scrollspy.Constructor = ScrollSpy; // SCROLLSPY NO CONFLICT\n  // =====================\n\n  $.fn.scrollspy.noConflict = function () {\n    $.fn.scrollspy = old;\n    return this;\n  }; // SCROLLSPY DATA-API\n  // ==================\n\n\n  $(window).on('load.bs.scrollspy.data-api', function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this);\n      Plugin.call($spy, $spy.data());\n    });\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: tab.js v3.3.4\n * http://getbootstrap.com/javascript/#tabs\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // TAB CLASS DEFINITION\n  // ====================\n\n  var Tab = function Tab(element) {\n    this.element = $(element);\n  };\n\n  Tab.VERSION = '3.3.4';\n  Tab.TRANSITION_DURATION = 150;\n\n  Tab.prototype.show = function () {\n    var $this = this.element;\n    var $ul = $this.closest('ul:not(.dropdown-menu)');\n    var selector = $this.data('target');\n\n    if (!selector) {\n      selector = $this.attr('href');\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, ''); // strip for ie7\n    }\n\n    if ($this.parent('li').hasClass('active')) return;\n    var $previous = $ul.find('.active:last a');\n    var hideEvent = $.Event('hide.bs.tab', {\n      relatedTarget: $this[0]\n    });\n    var showEvent = $.Event('show.bs.tab', {\n      relatedTarget: $previous[0]\n    });\n    $previous.trigger(hideEvent);\n    $this.trigger(showEvent);\n    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;\n    var $target = $(selector);\n    this.activate($this.closest('li'), $ul);\n    this.activate($target, $target.parent(), function () {\n      $previous.trigger({\n        type: 'hidden.bs.tab',\n        relatedTarget: $this[0]\n      });\n      $this.trigger({\n        type: 'shown.bs.tab',\n        relatedTarget: $previous[0]\n      });\n    });\n  };\n\n  Tab.prototype.activate = function (element, container, callback) {\n    var $active = container.find('> .active');\n    var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);\n\n    function next() {\n      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle=\"tab\"]').attr('aria-expanded', false);\n      element.addClass('active').find('[data-toggle=\"tab\"]').attr('aria-expanded', true);\n\n      if (transition) {\n        element[0].offsetWidth; // reflow for transition\n\n        element.addClass('in');\n      } else {\n        element.removeClass('fade');\n      }\n\n      if (element.parent('.dropdown-menu').length) {\n        element.closest('li.dropdown').addClass('active').end().find('[data-toggle=\"tab\"]').attr('aria-expanded', true);\n      }\n\n      callback && callback();\n    }\n\n    $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();\n    $active.removeClass('in');\n  }; // TAB PLUGIN DEFINITION\n  // =====================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.tab');\n      if (!data) $this.data('bs.tab', data = new Tab(this));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.tab;\n  $.fn.tab = Plugin;\n  $.fn.tab.Constructor = Tab; // TAB NO CONFLICT\n  // ===============\n\n  $.fn.tab.noConflict = function () {\n    $.fn.tab = old;\n    return this;\n  }; // TAB DATA-API\n  // ============\n\n\n  var clickHandler = function clickHandler(e) {\n    e.preventDefault();\n    Plugin.call($(this), 'show');\n  };\n\n  $(document).on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler);\n}(jQuery);\n/* ========================================================================\n * Bootstrap: affix.js v3.3.4\n * http://getbootstrap.com/javascript/#affix\n * ========================================================================\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // AFFIX CLASS DEFINITION\n  // ======================\n\n  var Affix = function Affix(element, options) {\n    this.options = $.extend({}, Affix.DEFAULTS, options);\n    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));\n    this.$element = $(element);\n    this.affixed = null;\n    this.unpin = null;\n    this.pinnedOffset = null;\n    this.checkPosition();\n  };\n\n  Affix.VERSION = '3.3.4';\n  Affix.RESET = 'affix affix-top affix-bottom';\n  Affix.DEFAULTS = {\n    offset: 0,\n    target: window\n  };\n\n  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\n    var scrollTop = this.$target.scrollTop();\n    var position = this.$element.offset();\n    var targetHeight = this.$target.height();\n    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false;\n\n    if (this.affixed == 'bottom') {\n      if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : 'bottom';\n      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';\n    }\n\n    var initializing = this.affixed == null;\n    var colliderTop = initializing ? scrollTop : position.top;\n    var colliderHeight = initializing ? targetHeight : height;\n    if (offsetTop != null && scrollTop <= offsetTop) return 'top';\n    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return 'bottom';\n    return false;\n  };\n\n  Affix.prototype.getPinnedOffset = function () {\n    if (this.pinnedOffset) return this.pinnedOffset;\n    this.$element.removeClass(Affix.RESET).addClass('affix');\n    var scrollTop = this.$target.scrollTop();\n    var position = this.$element.offset();\n    return this.pinnedOffset = position.top - scrollTop;\n  };\n\n  Affix.prototype.checkPositionWithEventLoop = function () {\n    setTimeout($.proxy(this.checkPosition, this), 1);\n  };\n\n  Affix.prototype.checkPosition = function () {\n    if (!this.$element.is(':visible')) return;\n    var height = this.$element.height();\n    var offset = this.options.offset;\n    var offsetTop = offset.top;\n    var offsetBottom = offset.bottom;\n    var scrollHeight = $(document.body).height();\n    if (_typeof(offset) != 'object') offsetBottom = offsetTop = offset;\n    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);\n    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);\n    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);\n\n    if (this.affixed != affix) {\n      if (this.unpin != null) this.$element.css('top', '');\n      var affixType = 'affix' + (affix ? '-' + affix : '');\n      var e = $.Event(affixType + '.bs.affix');\n      this.$element.trigger(e);\n      if (e.isDefaultPrevented()) return;\n      this.affixed = affix;\n      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;\n      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');\n    }\n\n    if (affix == 'bottom') {\n      this.$element.offset({\n        top: scrollHeight - height - offsetBottom\n      });\n    }\n  }; // AFFIX PLUGIN DEFINITION\n  // =======================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.affix');\n      var options = _typeof(option) == 'object' && option;\n      if (!data) $this.data('bs.affix', data = new Affix(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.affix;\n  $.fn.affix = Plugin;\n  $.fn.affix.Constructor = Affix; // AFFIX NO CONFLICT\n  // =================\n\n  $.fn.affix.noConflict = function () {\n    $.fn.affix = old;\n    return this;\n  }; // AFFIX DATA-API\n  // ==============\n\n\n  $(window).on('load', function () {\n    $('[data-spy=\"affix\"]').each(function () {\n      var $spy = $(this);\n      var data = $spy.data();\n      data.offset = data.offset || {};\n      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;\n      if (data.offsetTop != null) data.offset.top = data.offsetTop;\n      Plugin.call($spy, data);\n    });\n  });\n}(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/libs/bootstrap.js\n");

/***/ }),

/***/ "./resources/js/libs/jquery.js":
/*!*************************************!*\
  !*** ./resources/js/libs/jquery.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */\n!function (a, b) {\n  \"object\" == ( false ? 0 : _typeof(module)) && \"object\" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {\n    if (!a.document) throw new Error(\"jQuery requires a window with a document\");\n    return b(a);\n  } : b(a);\n}(\"undefined\" != typeof window ? window : this, function (a, b) {\n  var c = [],\n      d = c.slice,\n      e = c.concat,\n      f = c.push,\n      g = c.indexOf,\n      h = {},\n      i = h.toString,\n      j = h.hasOwnProperty,\n      k = {},\n      l = \"1.11.1\",\n      m = function m(a, b) {\n    return new m.fn.init(a, b);\n  },\n      n = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n      o = /^-ms-/,\n      p = /-([\\da-z])/gi,\n      q = function q(a, b) {\n    return b.toUpperCase();\n  };\n\n  m.fn = m.prototype = {\n    jquery: l,\n    constructor: m,\n    selector: \"\",\n    length: 0,\n    toArray: function toArray() {\n      return d.call(this);\n    },\n    get: function get(a) {\n      return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);\n    },\n    pushStack: function pushStack(a) {\n      var b = m.merge(this.constructor(), a);\n      return b.prevObject = this, b.context = this.context, b;\n    },\n    each: function each(a, b) {\n      return m.each(this, a, b);\n    },\n    map: function map(a) {\n      return this.pushStack(m.map(this, function (b, c) {\n        return a.call(b, c, b);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(d.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    eq: function eq(a) {\n      var b = this.length,\n          c = +a + (0 > a ? b : 0);\n      return this.pushStack(c >= 0 && b > c ? [this[c]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor(null);\n    },\n    push: f,\n    sort: c.sort,\n    splice: c.splice\n  }, m.extend = m.fn.extend = function () {\n    var a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g = arguments[0] || {},\n        h = 1,\n        i = arguments.length,\n        j = !1;\n\n    for (\"boolean\" == typeof g && (j = g, g = arguments[h] || {}, h++), \"object\" == _typeof(g) || m.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++) {\n      if (null != (e = arguments[h])) for (d in e) {\n        a = g[d], c = e[d], g !== c && (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? (b = !1, f = a && m.isArray(a) ? a : []) : f = a && m.isPlainObject(a) ? a : {}, g[d] = m.extend(j, f, c)) : void 0 !== c && (g[d] = c));\n      }\n    }\n\n    return g;\n  }, m.extend({\n    expando: \"jQuery\" + (l + Math.random()).replace(/\\D/g, \"\"),\n    isReady: !0,\n    error: function error(a) {\n      throw new Error(a);\n    },\n    noop: function noop() {},\n    isFunction: function isFunction(a) {\n      return \"function\" === m.type(a);\n    },\n    isArray: Array.isArray || function (a) {\n      return \"array\" === m.type(a);\n    },\n    isWindow: function isWindow(a) {\n      return null != a && a == a.window;\n    },\n    isNumeric: function isNumeric(a) {\n      return !m.isArray(a) && a - parseFloat(a) >= 0;\n    },\n    isEmptyObject: function isEmptyObject(a) {\n      var b;\n\n      for (b in a) {\n        return !1;\n      }\n\n      return !0;\n    },\n    isPlainObject: function isPlainObject(a) {\n      var b;\n      if (!a || \"object\" !== m.type(a) || a.nodeType || m.isWindow(a)) return !1;\n\n      try {\n        if (a.constructor && !j.call(a, \"constructor\") && !j.call(a.constructor.prototype, \"isPrototypeOf\")) return !1;\n      } catch (c) {\n        return !1;\n      }\n\n      if (k.ownLast) for (b in a) {\n        return j.call(a, b);\n      }\n\n      for (b in a) {\n        ;\n      }\n\n      return void 0 === b || j.call(a, b);\n    },\n    type: function type(a) {\n      return null == a ? a + \"\" : \"object\" == _typeof(a) || \"function\" == typeof a ? h[i.call(a)] || \"object\" : _typeof(a);\n    },\n    globalEval: function globalEval(b) {\n      b && m.trim(b) && (a.execScript || function (b) {\n        a.eval.call(a, b);\n      })(b);\n    },\n    camelCase: function camelCase(a) {\n      return a.replace(o, \"ms-\").replace(p, q);\n    },\n    nodeName: function nodeName(a, b) {\n      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();\n    },\n    each: function each(a, b, c) {\n      var d,\n          e = 0,\n          f = a.length,\n          g = r(a);\n\n      if (c) {\n        if (g) {\n          for (; f > e; e++) {\n            if (d = b.apply(a[e], c), d === !1) break;\n          }\n        } else for (e in a) {\n          if (d = b.apply(a[e], c), d === !1) break;\n        }\n      } else if (g) {\n        for (; f > e; e++) {\n          if (d = b.call(a[e], e, a[e]), d === !1) break;\n        }\n      } else for (e in a) {\n        if (d = b.call(a[e], e, a[e]), d === !1) break;\n      }\n\n      return a;\n    },\n    trim: function trim(a) {\n      return null == a ? \"\" : (a + \"\").replace(n, \"\");\n    },\n    makeArray: function makeArray(a, b) {\n      var c = b || [];\n      return null != a && (r(Object(a)) ? m.merge(c, \"string\" == typeof a ? [a] : a) : f.call(c, a)), c;\n    },\n    inArray: function inArray(a, b, c) {\n      var d;\n\n      if (b) {\n        if (g) return g.call(b, a, c);\n\n        for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++) {\n          if (c in b && b[c] === a) return c;\n        }\n      }\n\n      return -1;\n    },\n    merge: function merge(a, b) {\n      var c = +b.length,\n          d = 0,\n          e = a.length;\n\n      while (c > d) {\n        a[e++] = b[d++];\n      }\n\n      if (c !== c) while (void 0 !== b[d]) {\n        a[e++] = b[d++];\n      }\n      return a.length = e, a;\n    },\n    grep: function grep(a, b, c) {\n      for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {\n        d = !b(a[f], f), d !== h && e.push(a[f]);\n      }\n\n      return e;\n    },\n    map: function map(a, b, c) {\n      var d,\n          f = 0,\n          g = a.length,\n          h = r(a),\n          i = [];\n      if (h) for (; g > f; f++) {\n        d = b(a[f], f, c), null != d && i.push(d);\n      } else for (f in a) {\n        d = b(a[f], f, c), null != d && i.push(d);\n      }\n      return e.apply([], i);\n    },\n    guid: 1,\n    proxy: function proxy(a, b) {\n      var c, e, f;\n      return \"string\" == typeof b && (f = a[b], b = a, a = f), m.isFunction(a) ? (c = d.call(arguments, 2), e = function e() {\n        return a.apply(b || this, c.concat(d.call(arguments)));\n      }, e.guid = a.guid = a.guid || m.guid++, e) : void 0;\n    },\n    now: function now() {\n      return +new Date();\n    },\n    support: k\n  }), m.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (a, b) {\n    h[\"[object \" + b + \"]\"] = b.toLowerCase();\n  });\n\n  function r(a) {\n    var b = a.length,\n        c = m.type(a);\n    return \"function\" === c || m.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : \"array\" === c || 0 === b || \"number\" == typeof b && b > 0 && b - 1 in a;\n  }\n\n  var s = function (a) {\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s,\n        t,\n        u = \"sizzle\" + -new Date(),\n        v = a.document,\n        w = 0,\n        x = 0,\n        y = gb(),\n        z = gb(),\n        A = gb(),\n        B = function B(a, b) {\n      return a === b && (l = !0), 0;\n    },\n        C = \"undefined\",\n        D = 1 << 31,\n        E = {}.hasOwnProperty,\n        F = [],\n        G = F.pop,\n        H = F.push,\n        I = F.push,\n        J = F.slice,\n        K = F.indexOf || function (a) {\n      for (var b = 0, c = this.length; c > b; b++) {\n        if (this[b] === a) return b;\n      }\n\n      return -1;\n    },\n        L = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n        M = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        N = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n        O = N.replace(\"w\", \"w#\"),\n        P = \"\\\\[\" + M + \"*(\" + N + \")(?:\" + M + \"*([*^$|!~]?=)\" + M + \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + O + \"))|)\" + M + \"*\\\\]\",\n        Q = \":(\" + N + \")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + P + \")*)|.*)\\\\)|)\",\n        R = new RegExp(\"^\" + M + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + M + \"+$\", \"g\"),\n        S = new RegExp(\"^\" + M + \"*,\" + M + \"*\"),\n        T = new RegExp(\"^\" + M + \"*([>+~]|\" + M + \")\" + M + \"*\"),\n        U = new RegExp(\"=\" + M + \"*([^\\\\]'\\\"]*?)\" + M + \"*\\\\]\", \"g\"),\n        V = new RegExp(Q),\n        W = new RegExp(\"^\" + O + \"$\"),\n        X = {\n      ID: new RegExp(\"^#(\" + N + \")\"),\n      CLASS: new RegExp(\"^\\\\.(\" + N + \")\"),\n      TAG: new RegExp(\"^(\" + N.replace(\"w\", \"w*\") + \")\"),\n      ATTR: new RegExp(\"^\" + P),\n      PSEUDO: new RegExp(\"^\" + Q),\n      CHILD: new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + M + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + M + \"*(?:([+-]|)\" + M + \"*(\\\\d+)|))\" + M + \"*\\\\)|)\", \"i\"),\n      bool: new RegExp(\"^(?:\" + L + \")$\", \"i\"),\n      needsContext: new RegExp(\"^\" + M + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + M + \"*((?:-\\\\d)?\\\\d*)\" + M + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        Y = /^(?:input|select|textarea|button)$/i,\n        Z = /^h\\d$/i,\n        $ = /^[^{]+\\{\\s*\\[native \\w/,\n        _ = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        ab = /[+~]/,\n        bb = /'|\\\\/g,\n        cb = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + M + \"?|(\" + M + \")|.)\", \"ig\"),\n        db = function db(a, b, c) {\n      var d = \"0x\" + b - 65536;\n      return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);\n    };\n\n    try {\n      I.apply(F = J.call(v.childNodes), v.childNodes), F[v.childNodes.length].nodeType;\n    } catch (eb) {\n      I = {\n        apply: F.length ? function (a, b) {\n          H.apply(a, J.call(b));\n        } : function (a, b) {\n          var c = a.length,\n              d = 0;\n\n          while (a[c++] = b[d++]) {\n            ;\n          }\n\n          a.length = c - 1;\n        }\n      };\n    }\n\n    function fb(a, b, d, e) {\n      var f, h, j, k, l, o, r, s, w, x;\n      if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], !a || \"string\" != typeof a) return d;\n      if (1 !== (k = b.nodeType) && 9 !== k) return [];\n\n      if (p && !e) {\n        if (f = _.exec(a)) if (j = f[1]) {\n          if (9 === k) {\n            if (h = b.getElementById(j), !h || !h.parentNode) return d;\n            if (h.id === j) return d.push(h), d;\n          } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;\n        } else {\n          if (f[2]) return I.apply(d, b.getElementsByTagName(a)), d;\n          if ((j = f[3]) && c.getElementsByClassName && b.getElementsByClassName) return I.apply(d, b.getElementsByClassName(j)), d;\n        }\n\n        if (c.qsa && (!q || !q.test(a))) {\n          if (s = r = u, w = b, x = 9 === k && a, 1 === k && \"object\" !== b.nodeName.toLowerCase()) {\n            o = g(a), (r = b.getAttribute(\"id\")) ? s = r.replace(bb, \"\\\\$&\") : b.setAttribute(\"id\", s), s = \"[id='\" + s + \"'] \", l = o.length;\n\n            while (l--) {\n              o[l] = s + qb(o[l]);\n            }\n\n            w = ab.test(a) && ob(b.parentNode) || b, x = o.join(\",\");\n          }\n\n          if (x) try {\n            return I.apply(d, w.querySelectorAll(x)), d;\n          } catch (y) {} finally {\n            r || b.removeAttribute(\"id\");\n          }\n        }\n      }\n\n      return i(a.replace(R, \"$1\"), b, d, e);\n    }\n\n    function gb() {\n      var a = [];\n\n      function b(c, e) {\n        return a.push(c + \" \") > d.cacheLength && delete b[a.shift()], b[c + \" \"] = e;\n      }\n\n      return b;\n    }\n\n    function hb(a) {\n      return a[u] = !0, a;\n    }\n\n    function ib(a) {\n      var b = n.createElement(\"div\");\n\n      try {\n        return !!a(b);\n      } catch (c) {\n        return !1;\n      } finally {\n        b.parentNode && b.parentNode.removeChild(b), b = null;\n      }\n    }\n\n    function jb(a, b) {\n      var c = a.split(\"|\"),\n          e = a.length;\n\n      while (e--) {\n        d.attrHandle[c[e]] = b;\n      }\n    }\n\n    function kb(a, b) {\n      var c = b && a,\n          d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || D) - (~a.sourceIndex || D);\n      if (d) return d;\n      if (c) while (c = c.nextSibling) {\n        if (c === b) return -1;\n      }\n      return a ? 1 : -1;\n    }\n\n    function lb(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return \"input\" === c && b.type === a;\n      };\n    }\n\n    function mb(a) {\n      return function (b) {\n        var c = b.nodeName.toLowerCase();\n        return (\"input\" === c || \"button\" === c) && b.type === a;\n      };\n    }\n\n    function nb(a) {\n      return hb(function (b) {\n        return b = +b, hb(function (c, d) {\n          var e,\n              f = a([], c.length, b),\n              g = f.length;\n\n          while (g--) {\n            c[e = f[g]] && (c[e] = !(d[e] = c[e]));\n          }\n        });\n      });\n    }\n\n    function ob(a) {\n      return a && _typeof(a.getElementsByTagName) !== C && a;\n    }\n\n    c = fb.support = {}, f = fb.isXML = function (a) {\n      var b = a && (a.ownerDocument || a).documentElement;\n      return b ? \"HTML\" !== b.nodeName : !1;\n    }, m = fb.setDocument = function (a) {\n      var b,\n          e = a ? a.ownerDocument || a : v,\n          g = e.defaultView;\n      return e !== n && 9 === e.nodeType && e.documentElement ? (n = e, o = e.documentElement, p = !f(e), g && g !== g.top && (g.addEventListener ? g.addEventListener(\"unload\", function () {\n        m();\n      }, !1) : g.attachEvent && g.attachEvent(\"onunload\", function () {\n        m();\n      })), c.attributes = ib(function (a) {\n        return a.className = \"i\", !a.getAttribute(\"className\");\n      }), c.getElementsByTagName = ib(function (a) {\n        return a.appendChild(e.createComment(\"\")), !a.getElementsByTagName(\"*\").length;\n      }), c.getElementsByClassName = $.test(e.getElementsByClassName) && ib(function (a) {\n        return a.innerHTML = \"<div class='a'></div><div class='a i'></div>\", a.firstChild.className = \"i\", 2 === a.getElementsByClassName(\"i\").length;\n      }), c.getById = ib(function (a) {\n        return o.appendChild(a).id = u, !e.getElementsByName || !e.getElementsByName(u).length;\n      }), c.getById ? (d.find.ID = function (a, b) {\n        if (_typeof(b.getElementById) !== C && p) {\n          var c = b.getElementById(a);\n          return c && c.parentNode ? [c] : [];\n        }\n      }, d.filter.ID = function (a) {\n        var b = a.replace(cb, db);\n        return function (a) {\n          return a.getAttribute(\"id\") === b;\n        };\n      }) : (delete d.find.ID, d.filter.ID = function (a) {\n        var b = a.replace(cb, db);\n        return function (a) {\n          var c = _typeof(a.getAttributeNode) !== C && a.getAttributeNode(\"id\");\n          return c && c.value === b;\n        };\n      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {\n        return _typeof(b.getElementsByTagName) !== C ? b.getElementsByTagName(a) : void 0;\n      } : function (a, b) {\n        var c,\n            d = [],\n            e = 0,\n            f = b.getElementsByTagName(a);\n\n        if (\"*\" === a) {\n          while (c = f[e++]) {\n            1 === c.nodeType && d.push(c);\n          }\n\n          return d;\n        }\n\n        return f;\n      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {\n        return _typeof(b.getElementsByClassName) !== C && p ? b.getElementsByClassName(a) : void 0;\n      }, r = [], q = [], (c.qsa = $.test(e.querySelectorAll)) && (ib(function (a) {\n        a.innerHTML = \"<select msallowclip=''><option selected=''></option></select>\", a.querySelectorAll(\"[msallowclip^='']\").length && q.push(\"[*^$]=\" + M + \"*(?:''|\\\"\\\")\"), a.querySelectorAll(\"[selected]\").length || q.push(\"\\\\[\" + M + \"*(?:value|\" + L + \")\"), a.querySelectorAll(\":checked\").length || q.push(\":checked\");\n      }), ib(function (a) {\n        var b = e.createElement(\"input\");\n        b.setAttribute(\"type\", \"hidden\"), a.appendChild(b).setAttribute(\"name\", \"D\"), a.querySelectorAll(\"[name=d]\").length && q.push(\"name\" + M + \"*[*^$|!~]?=\"), a.querySelectorAll(\":enabled\").length || q.push(\":enabled\", \":disabled\"), a.querySelectorAll(\"*,:x\"), q.push(\",.*:\");\n      })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ib(function (a) {\n        c.disconnectedMatch = s.call(a, \"div\"), s.call(a, \"[s!='']:x\"), r.push(\"!=\", Q);\n      }), q = q.length && new RegExp(q.join(\"|\")), r = r.length && new RegExp(r.join(\"|\")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {\n        var c = 9 === a.nodeType ? a.documentElement : a,\n            d = b && b.parentNode;\n        return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));\n      } : function (a, b) {\n        if (b) while (b = b.parentNode) {\n          if (b === a) return !0;\n        }\n        return !1;\n      }, B = b ? function (a, b) {\n        if (a === b) return l = !0, 0;\n        var d = !a.compareDocumentPosition - !b.compareDocumentPosition;\n        return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === e || a.ownerDocument === v && t(v, a) ? -1 : b === e || b.ownerDocument === v && t(v, b) ? 1 : k ? K.call(k, a) - K.call(k, b) : 0 : 4 & d ? -1 : 1);\n      } : function (a, b) {\n        if (a === b) return l = !0, 0;\n        var c,\n            d = 0,\n            f = a.parentNode,\n            g = b.parentNode,\n            h = [a],\n            i = [b];\n        if (!f || !g) return a === e ? -1 : b === e ? 1 : f ? -1 : g ? 1 : k ? K.call(k, a) - K.call(k, b) : 0;\n        if (f === g) return kb(a, b);\n        c = a;\n\n        while (c = c.parentNode) {\n          h.unshift(c);\n        }\n\n        c = b;\n\n        while (c = c.parentNode) {\n          i.unshift(c);\n        }\n\n        while (h[d] === i[d]) {\n          d++;\n        }\n\n        return d ? kb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;\n      }, e) : n;\n    }, fb.matches = function (a, b) {\n      return fb(a, null, null, b);\n    }, fb.matchesSelector = function (a, b) {\n      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, \"='$1']\"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {\n        var d = s.call(a, b);\n        if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;\n      } catch (e) {}\n      return fb(b, n, null, [a]).length > 0;\n    }, fb.contains = function (a, b) {\n      return (a.ownerDocument || a) !== n && m(a), t(a, b);\n    }, fb.attr = function (a, b) {\n      (a.ownerDocument || a) !== n && m(a);\n      var e = d.attrHandle[b.toLowerCase()],\n          f = e && E.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;\n      return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;\n    }, fb.error = function (a) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + a);\n    }, fb.uniqueSort = function (a) {\n      var b,\n          d = [],\n          e = 0,\n          f = 0;\n\n      if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {\n        while (b = a[f++]) {\n          b === a[f] && (e = d.push(f));\n        }\n\n        while (e--) {\n          a.splice(d[e], 1);\n        }\n      }\n\n      return k = null, a;\n    }, e = fb.getText = function (a) {\n      var b,\n          c = \"\",\n          d = 0,\n          f = a.nodeType;\n\n      if (f) {\n        if (1 === f || 9 === f || 11 === f) {\n          if (\"string\" == typeof a.textContent) return a.textContent;\n\n          for (a = a.firstChild; a; a = a.nextSibling) {\n            c += e(a);\n          }\n        } else if (3 === f || 4 === f) return a.nodeValue;\n      } else while (b = a[d++]) {\n        c += e(b);\n      }\n\n      return c;\n    }, d = fb.selectors = {\n      cacheLength: 50,\n      createPseudo: hb,\n      match: X,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: !0\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: !0\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        ATTR: function ATTR(a) {\n          return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || \"\").replace(cb, db), \"~=\" === a[2] && (a[3] = \" \" + a[3] + \" \"), a.slice(0, 4);\n        },\n        CHILD: function CHILD(a) {\n          return a[1] = a[1].toLowerCase(), \"nth\" === a[1].slice(0, 3) ? (a[3] || fb.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * (\"even\" === a[3] || \"odd\" === a[3])), a[5] = +(a[7] + a[8] || \"odd\" === a[3])) : a[3] && fb.error(a[0]), a;\n        },\n        PSEUDO: function PSEUDO(a) {\n          var b,\n              c = !a[6] && a[2];\n          return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || \"\" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(\")\", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));\n        }\n      },\n      filter: {\n        TAG: function TAG(a) {\n          var b = a.replace(cb, db).toLowerCase();\n          return \"*\" === a ? function () {\n            return !0;\n          } : function (a) {\n            return a.nodeName && a.nodeName.toLowerCase() === b;\n          };\n        },\n        CLASS: function CLASS(a) {\n          var b = y[a + \" \"];\n          return b || (b = new RegExp(\"(^|\" + M + \")\" + a + \"(\" + M + \"|$)\")) && y(a, function (a) {\n            return b.test(\"string\" == typeof a.className && a.className || _typeof(a.getAttribute) !== C && a.getAttribute(\"class\") || \"\");\n          });\n        },\n        ATTR: function ATTR(a, b, c) {\n          return function (d) {\n            var e = fb.attr(d, a);\n            return null == e ? \"!=\" === b : b ? (e += \"\", \"=\" === b ? e === c : \"!=\" === b ? e !== c : \"^=\" === b ? c && 0 === e.indexOf(c) : \"*=\" === b ? c && e.indexOf(c) > -1 : \"$=\" === b ? c && e.slice(-c.length) === c : \"~=\" === b ? (\" \" + e + \" \").indexOf(c) > -1 : \"|=\" === b ? e === c || e.slice(0, c.length + 1) === c + \"-\" : !1) : !0;\n          };\n        },\n        CHILD: function CHILD(a, b, c, d, e) {\n          var f = \"nth\" !== a.slice(0, 3),\n              g = \"last\" !== a.slice(-4),\n              h = \"of-type\" === b;\n          return 1 === d && 0 === e ? function (a) {\n            return !!a.parentNode;\n          } : function (b, c, i) {\n            var j,\n                k,\n                l,\n                m,\n                n,\n                o,\n                p = f !== g ? \"nextSibling\" : \"previousSibling\",\n                q = b.parentNode,\n                r = h && b.nodeName.toLowerCase(),\n                s = !i && !h;\n\n            if (q) {\n              if (f) {\n                while (p) {\n                  l = b;\n\n                  while (l = l[p]) {\n                    if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;\n                  }\n\n                  o = p = \"only\" === a && !o && \"nextSibling\";\n                }\n\n                return !0;\n              }\n\n              if (o = [g ? q.firstChild : q.lastChild], g && s) {\n                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];\n\n                while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {\n                  if (1 === l.nodeType && ++m && l === b) {\n                    k[a] = [w, n, m];\n                    break;\n                  }\n                }\n              } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {\n                if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;\n              }\n\n              return m -= e, m === d || m % d === 0 && m / d >= 0;\n            }\n          };\n        },\n        PSEUDO: function PSEUDO(a, b) {\n          var c,\n              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || fb.error(\"unsupported pseudo: \" + a);\n          return e[u] ? e(b) : e.length > 1 ? (c = [a, a, \"\", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? hb(function (a, c) {\n            var d,\n                f = e(a, b),\n                g = f.length;\n\n            while (g--) {\n              d = K.call(a, f[g]), a[d] = !(c[d] = f[g]);\n            }\n          }) : function (a) {\n            return e(a, 0, c);\n          }) : e;\n        }\n      },\n      pseudos: {\n        not: hb(function (a) {\n          var b = [],\n              c = [],\n              d = h(a.replace(R, \"$1\"));\n          return d[u] ? hb(function (a, b, c, e) {\n            var f,\n                g = d(a, null, e, []),\n                h = a.length;\n\n            while (h--) {\n              (f = g[h]) && (a[h] = !(b[h] = f));\n            }\n          }) : function (a, e, f) {\n            return b[0] = a, d(b, null, f, c), !c.pop();\n          };\n        }),\n        has: hb(function (a) {\n          return function (b) {\n            return fb(a, b).length > 0;\n          };\n        }),\n        contains: hb(function (a) {\n          return function (b) {\n            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;\n          };\n        }),\n        lang: hb(function (a) {\n          return W.test(a || \"\") || fb.error(\"unsupported lang: \" + a), a = a.replace(cb, db).toLowerCase(), function (b) {\n            var c;\n\n            do {\n              if (c = p ? b.lang : b.getAttribute(\"xml:lang\") || b.getAttribute(\"lang\")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + \"-\");\n            } while ((b = b.parentNode) && 1 === b.nodeType);\n\n            return !1;\n          };\n        }),\n        target: function target(b) {\n          var c = a.location && a.location.hash;\n          return c && c.slice(1) === b.id;\n        },\n        root: function root(a) {\n          return a === o;\n        },\n        focus: function focus(a) {\n          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);\n        },\n        enabled: function enabled(a) {\n          return a.disabled === !1;\n        },\n        disabled: function disabled(a) {\n          return a.disabled === !0;\n        },\n        checked: function checked(a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && !!a.checked || \"option\" === b && !!a.selected;\n        },\n        selected: function selected(a) {\n          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;\n        },\n        empty: function empty(a) {\n          for (a = a.firstChild; a; a = a.nextSibling) {\n            if (a.nodeType < 6) return !1;\n          }\n\n          return !0;\n        },\n        parent: function parent(a) {\n          return !d.pseudos.empty(a);\n        },\n        header: function header(a) {\n          return Z.test(a.nodeName);\n        },\n        input: function input(a) {\n          return Y.test(a.nodeName);\n        },\n        button: function button(a) {\n          var b = a.nodeName.toLowerCase();\n          return \"input\" === b && \"button\" === a.type || \"button\" === b;\n        },\n        text: function text(a) {\n          var b;\n          return \"input\" === a.nodeName.toLowerCase() && \"text\" === a.type && (null == (b = a.getAttribute(\"type\")) || \"text\" === b.toLowerCase());\n        },\n        first: nb(function () {\n          return [0];\n        }),\n        last: nb(function (a, b) {\n          return [b - 1];\n        }),\n        eq: nb(function (a, b, c) {\n          return [0 > c ? c + b : c];\n        }),\n        even: nb(function (a, b) {\n          for (var c = 0; b > c; c += 2) {\n            a.push(c);\n          }\n\n          return a;\n        }),\n        odd: nb(function (a, b) {\n          for (var c = 1; b > c; c += 2) {\n            a.push(c);\n          }\n\n          return a;\n        }),\n        lt: nb(function (a, b, c) {\n          for (var d = 0 > c ? c + b : c; --d >= 0;) {\n            a.push(d);\n          }\n\n          return a;\n        }),\n        gt: nb(function (a, b, c) {\n          for (var d = 0 > c ? c + b : c; ++d < b;) {\n            a.push(d);\n          }\n\n          return a;\n        })\n      }\n    }, d.pseudos.nth = d.pseudos.eq;\n\n    for (b in {\n      radio: !0,\n      checkbox: !0,\n      file: !0,\n      password: !0,\n      image: !0\n    }) {\n      d.pseudos[b] = lb(b);\n    }\n\n    for (b in {\n      submit: !0,\n      reset: !0\n    }) {\n      d.pseudos[b] = mb(b);\n    }\n\n    function pb() {}\n\n    pb.prototype = d.filters = d.pseudos, d.setFilters = new pb(), g = fb.tokenize = function (a, b) {\n      var c,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = z[a + \" \"];\n      if (k) return b ? 0 : k.slice(0);\n      h = a, i = [], j = d.preFilter;\n\n      while (h) {\n        (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({\n          value: c,\n          type: e[0].replace(R, \" \")\n        }), h = h.slice(c.length));\n\n        for (g in d.filter) {\n          !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({\n            value: c,\n            type: g,\n            matches: e\n          }), h = h.slice(c.length));\n        }\n\n        if (!c) break;\n      }\n\n      return b ? h.length : h ? fb.error(a) : z(a, i).slice(0);\n    };\n\n    function qb(a) {\n      for (var b = 0, c = a.length, d = \"\"; c > b; b++) {\n        d += a[b].value;\n      }\n\n      return d;\n    }\n\n    function rb(a, b, c) {\n      var d = b.dir,\n          e = c && \"parentNode\" === d,\n          f = x++;\n      return b.first ? function (b, c, f) {\n        while (b = b[d]) {\n          if (1 === b.nodeType || e) return a(b, c, f);\n        }\n      } : function (b, c, g) {\n        var h,\n            i,\n            j = [w, f];\n\n        if (g) {\n          while (b = b[d]) {\n            if ((1 === b.nodeType || e) && a(b, c, g)) return !0;\n          }\n        } else while (b = b[d]) {\n          if (1 === b.nodeType || e) {\n            if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];\n            if (i[d] = j, j[2] = a(b, c, g)) return !0;\n          }\n        }\n      };\n    }\n\n    function sb(a) {\n      return a.length > 1 ? function (b, c, d) {\n        var e = a.length;\n\n        while (e--) {\n          if (!a[e](b, c, d)) return !1;\n        }\n\n        return !0;\n      } : a[0];\n    }\n\n    function tb(a, b, c) {\n      for (var d = 0, e = b.length; e > d; d++) {\n        fb(a, b[d], c);\n      }\n\n      return c;\n    }\n\n    function ub(a, b, c, d, e) {\n      for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) {\n        (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));\n      }\n\n      return g;\n    }\n\n    function vb(a, b, c, d, e, f) {\n      return d && !d[u] && (d = vb(d)), e && !e[u] && (e = vb(e, f)), hb(function (f, g, h, i) {\n        var j,\n            k,\n            l,\n            m = [],\n            n = [],\n            o = g.length,\n            p = f || tb(b || \"*\", h.nodeType ? [h] : h, []),\n            q = !a || !f && b ? p : ub(p, m, a, h, i),\n            r = c ? e || (f ? a : o || d) ? [] : g : q;\n\n        if (c && c(q, r, h, i), d) {\n          j = ub(r, n), d(j, [], h, i), k = j.length;\n\n          while (k--) {\n            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));\n          }\n        }\n\n        if (f) {\n          if (e || a) {\n            if (e) {\n              j = [], k = r.length;\n\n              while (k--) {\n                (l = r[k]) && j.push(q[k] = l);\n              }\n\n              e(null, r = [], j, i);\n            }\n\n            k = r.length;\n\n            while (k--) {\n              (l = r[k]) && (j = e ? K.call(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));\n            }\n          }\n        } else r = ub(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : I.apply(g, r);\n      });\n    }\n\n    function wb(a) {\n      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[\" \"], i = g ? 1 : 0, k = rb(function (a) {\n        return a === b;\n      }, h, !0), l = rb(function (a) {\n        return K.call(b, a) > -1;\n      }, h, !0), m = [function (a, c, d) {\n        return !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));\n      }]; f > i; i++) {\n        if (c = d.relative[a[i].type]) m = [rb(sb(m), c)];else {\n          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {\n            for (e = ++i; f > e; e++) {\n              if (d.relative[a[e].type]) break;\n            }\n\n            return vb(i > 1 && sb(m), i > 1 && qb(a.slice(0, i - 1).concat({\n              value: \" \" === a[i - 2].type ? \"*\" : \"\"\n            })).replace(R, \"$1\"), c, e > i && wb(a.slice(i, e)), f > e && wb(a = a.slice(e)), f > e && qb(a));\n          }\n\n          m.push(c);\n        }\n      }\n\n      return sb(m);\n    }\n\n    function xb(a, b) {\n      var c = b.length > 0,\n          e = a.length > 0,\n          f = function f(_f, g, h, i, k) {\n        var l,\n            m,\n            o,\n            p = 0,\n            q = \"0\",\n            r = _f && [],\n            s = [],\n            t = j,\n            u = _f || e && d.find.TAG(\"*\", k),\n            v = w += null == t ? 1 : Math.random() || .1,\n            x = u.length;\n\n        for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {\n          if (e && l) {\n            m = 0;\n\n            while (o = a[m++]) {\n              if (o(l, g, h)) {\n                i.push(l);\n                break;\n              }\n            }\n\n            k && (w = v);\n          }\n\n          c && ((l = !o && l) && p--, _f && r.push(l));\n        }\n\n        if (p += q, c && q !== p) {\n          m = 0;\n\n          while (o = b[m++]) {\n            o(r, s, g, h);\n          }\n\n          if (_f) {\n            if (p > 0) while (q--) {\n              r[q] || s[q] || (s[q] = G.call(i));\n            }\n            s = ub(s);\n          }\n\n          I.apply(i, s), k && !_f && s.length > 0 && p + b.length > 1 && fb.uniqueSort(i);\n        }\n\n        return k && (w = v, j = t), r;\n      };\n\n      return c ? hb(f) : f;\n    }\n\n    return h = fb.compile = function (a, b) {\n      var c,\n          d = [],\n          e = [],\n          f = A[a + \" \"];\n\n      if (!f) {\n        b || (b = g(a)), c = b.length;\n\n        while (c--) {\n          f = wb(b[c]), f[u] ? d.push(f) : e.push(f);\n        }\n\n        f = A(a, xb(e, d)), f.selector = a;\n      }\n\n      return f;\n    }, i = fb.select = function (a, b, e, f) {\n      var i,\n          j,\n          k,\n          l,\n          m,\n          n = \"function\" == typeof a && a,\n          o = !f && g(a = n.selector || a);\n\n      if (e = e || [], 1 === o.length) {\n        if (j = o[0] = o[0].slice(0), j.length > 2 && \"ID\" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {\n          if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b) return e;\n          n && (b = b.parentNode), a = a.slice(j.shift().value.length);\n        }\n\n        i = X.needsContext.test(a) ? 0 : j.length;\n\n        while (i--) {\n          if (k = j[i], d.relative[l = k.type]) break;\n\n          if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && ob(b.parentNode) || b))) {\n            if (j.splice(i, 1), a = f.length && qb(j), !a) return I.apply(e, f), e;\n            break;\n          }\n        }\n      }\n\n      return (n || h(a, o))(f, b, !p, e, ab.test(a) && ob(b.parentNode) || b), e;\n    }, c.sortStable = u.split(\"\").sort(B).join(\"\") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ib(function (a) {\n      return 1 & a.compareDocumentPosition(n.createElement(\"div\"));\n    }), ib(function (a) {\n      return a.innerHTML = \"<a href='#'></a>\", \"#\" === a.firstChild.getAttribute(\"href\");\n    }) || jb(\"type|href|height|width\", function (a, b, c) {\n      return c ? void 0 : a.getAttribute(b, \"type\" === b.toLowerCase() ? 1 : 2);\n    }), c.attributes && ib(function (a) {\n      return a.innerHTML = \"<input/>\", a.firstChild.setAttribute(\"value\", \"\"), \"\" === a.firstChild.getAttribute(\"value\");\n    }) || jb(\"value\", function (a, b, c) {\n      return c || \"input\" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;\n    }), ib(function (a) {\n      return null == a.getAttribute(\"disabled\");\n    }) || jb(L, function (a, b, c) {\n      var d;\n      return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;\n    }), fb;\n  }(a);\n\n  m.find = s, m.expr = s.selectors, m.expr[\":\"] = m.expr.pseudos, m.unique = s.uniqueSort, m.text = s.getText, m.isXMLDoc = s.isXML, m.contains = s.contains;\n  var t = m.expr.match.needsContext,\n      u = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n      v = /^.[^:#\\[\\.,]*$/;\n\n  function w(a, b, c) {\n    if (m.isFunction(b)) return m.grep(a, function (a, d) {\n      return !!b.call(a, d, a) !== c;\n    });\n    if (b.nodeType) return m.grep(a, function (a) {\n      return a === b !== c;\n    });\n\n    if (\"string\" == typeof b) {\n      if (v.test(b)) return m.filter(b, a, c);\n      b = m.filter(b, a);\n    }\n\n    return m.grep(a, function (a) {\n      return m.inArray(a, b) >= 0 !== c;\n    });\n  }\n\n  m.filter = function (a, b, c) {\n    var d = b[0];\n    return c && (a = \":not(\" + a + \")\"), 1 === b.length && 1 === d.nodeType ? m.find.matchesSelector(d, a) ? [d] : [] : m.find.matches(a, m.grep(b, function (a) {\n      return 1 === a.nodeType;\n    }));\n  }, m.fn.extend({\n    find: function find(a) {\n      var b,\n          c = [],\n          d = this,\n          e = d.length;\n      if (\"string\" != typeof a) return this.pushStack(m(a).filter(function () {\n        for (b = 0; e > b; b++) {\n          if (m.contains(d[b], this)) return !0;\n        }\n      }));\n\n      for (b = 0; e > b; b++) {\n        m.find(a, d[b], c);\n      }\n\n      return c = this.pushStack(e > 1 ? m.unique(c) : c), c.selector = this.selector ? this.selector + \" \" + a : a, c;\n    },\n    filter: function filter(a) {\n      return this.pushStack(w(this, a || [], !1));\n    },\n    not: function not(a) {\n      return this.pushStack(w(this, a || [], !0));\n    },\n    is: function is(a) {\n      return !!w(this, \"string\" == typeof a && t.test(a) ? m(a) : a || [], !1).length;\n    }\n  });\n\n  var x,\n      y = a.document,\n      z = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n      A = m.fn.init = function (a, b) {\n    var c, d;\n    if (!a) return this;\n\n    if (\"string\" == typeof a) {\n      if (c = \"<\" === a.charAt(0) && \">\" === a.charAt(a.length - 1) && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);\n\n      if (c[1]) {\n        if (b = b instanceof m ? b[0] : b, m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), u.test(c[1]) && m.isPlainObject(b)) for (c in b) {\n          m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);\n        }\n        return this;\n      }\n\n      if (d = y.getElementById(c[2]), d && d.parentNode) {\n        if (d.id !== c[2]) return x.find(a);\n        this.length = 1, this[0] = d;\n      }\n\n      return this.context = y, this.selector = a, this;\n    }\n\n    return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : m.isFunction(a) ? \"undefined\" != typeof x.ready ? x.ready(a) : a(m) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), m.makeArray(a, this));\n  };\n\n  A.prototype = m.fn, x = m(y);\n  var B = /^(?:parents|prev(?:Until|All))/,\n      C = {\n    children: !0,\n    contents: !0,\n    next: !0,\n    prev: !0\n  };\n  m.extend({\n    dir: function dir(a, b, c) {\n      var d = [],\n          e = a[b];\n\n      while (e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c))) {\n        1 === e.nodeType && d.push(e), e = e[b];\n      }\n\n      return d;\n    },\n    sibling: function sibling(a, b) {\n      for (var c = []; a; a = a.nextSibling) {\n        1 === a.nodeType && a !== b && c.push(a);\n      }\n\n      return c;\n    }\n  }), m.fn.extend({\n    has: function has(a) {\n      var b,\n          c = m(a, this),\n          d = c.length;\n      return this.filter(function () {\n        for (b = 0; d > b; b++) {\n          if (m.contains(this, c[b])) return !0;\n        }\n      });\n    },\n    closest: function closest(a, b) {\n      for (var c, d = 0, e = this.length, f = [], g = t.test(a) || \"string\" != typeof a ? m(a, b || this.context) : 0; e > d; d++) {\n        for (c = this[d]; c && c !== b; c = c.parentNode) {\n          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {\n            f.push(c);\n            break;\n          }\n        }\n      }\n\n      return this.pushStack(f.length > 1 ? m.unique(f) : f);\n    },\n    index: function index(a) {\n      return a ? \"string\" == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n    },\n    add: function add(a, b) {\n      return this.pushStack(m.unique(m.merge(this.get(), m(a, b))));\n    },\n    addBack: function addBack(a) {\n      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));\n    }\n  });\n\n  function D(a, b) {\n    do {\n      a = a[b];\n    } while (a && 1 !== a.nodeType);\n\n    return a;\n  }\n\n  m.each({\n    parent: function parent(a) {\n      var b = a.parentNode;\n      return b && 11 !== b.nodeType ? b : null;\n    },\n    parents: function parents(a) {\n      return m.dir(a, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(a, b, c) {\n      return m.dir(a, \"parentNode\", c);\n    },\n    next: function next(a) {\n      return D(a, \"nextSibling\");\n    },\n    prev: function prev(a) {\n      return D(a, \"previousSibling\");\n    },\n    nextAll: function nextAll(a) {\n      return m.dir(a, \"nextSibling\");\n    },\n    prevAll: function prevAll(a) {\n      return m.dir(a, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(a, b, c) {\n      return m.dir(a, \"nextSibling\", c);\n    },\n    prevUntil: function prevUntil(a, b, c) {\n      return m.dir(a, \"previousSibling\", c);\n    },\n    siblings: function siblings(a) {\n      return m.sibling((a.parentNode || {}).firstChild, a);\n    },\n    children: function children(a) {\n      return m.sibling(a.firstChild);\n    },\n    contents: function contents(a) {\n      return m.nodeName(a, \"iframe\") ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes);\n    }\n  }, function (a, b) {\n    m.fn[a] = function (c, d) {\n      var e = m.map(this, b, c);\n      return \"Until\" !== a.slice(-5) && (d = c), d && \"string\" == typeof d && (e = m.filter(d, e)), this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), this.pushStack(e);\n    };\n  });\n  var E = /\\S+/g,\n      F = {};\n\n  function G(a) {\n    var b = F[a] = {};\n    return m.each(a.match(E) || [], function (a, c) {\n      b[c] = !0;\n    }), b;\n  }\n\n  m.Callbacks = function (a) {\n    a = \"string\" == typeof a ? F[a] || G(a) : m.extend({}, a);\n\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h = [],\n        i = !a.once && [],\n        j = function j(l) {\n      for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++) {\n        if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {\n          c = !1;\n          break;\n        }\n      }\n\n      b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable());\n    },\n        k = {\n      add: function add() {\n        if (h) {\n          var d = h.length;\n          !function f(b) {\n            m.each(b, function (b, c) {\n              var d = m.type(c);\n              \"function\" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && \"string\" !== d && f(c);\n            });\n          }(arguments), b ? e = h.length : c && (g = d, j(c));\n        }\n\n        return this;\n      },\n      remove: function remove() {\n        return h && m.each(arguments, function (a, c) {\n          var d;\n\n          while ((d = m.inArray(c, h, d)) > -1) {\n            h.splice(d, 1), b && (e >= d && e--, f >= d && f--);\n          }\n        }), this;\n      },\n      has: function has(a) {\n        return a ? m.inArray(a, h) > -1 : !(!h || !h.length);\n      },\n      empty: function empty() {\n        return h = [], e = 0, this;\n      },\n      disable: function disable() {\n        return h = i = c = void 0, this;\n      },\n      disabled: function disabled() {\n        return !h;\n      },\n      lock: function lock() {\n        return i = void 0, c || k.disable(), this;\n      },\n      locked: function locked() {\n        return !i;\n      },\n      fireWith: function fireWith(a, c) {\n        return !h || d && !i || (c = c || [], c = [a, c.slice ? c.slice() : c], b ? i.push(c) : j(c)), this;\n      },\n      fire: function fire() {\n        return k.fireWith(this, arguments), this;\n      },\n      fired: function fired() {\n        return !!d;\n      }\n    };\n\n    return k;\n  }, m.extend({\n    Deferred: function Deferred(a) {\n      var b = [[\"resolve\", \"done\", m.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", m.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", m.Callbacks(\"memory\")]],\n          c = \"pending\",\n          d = {\n        state: function state() {\n          return c;\n        },\n        always: function always() {\n          return e.done(arguments).fail(arguments), this;\n        },\n        then: function then() {\n          var a = arguments;\n          return m.Deferred(function (c) {\n            m.each(b, function (b, f) {\n              var g = m.isFunction(a[b]) && a[b];\n              e[f[1]](function () {\n                var a = g && g.apply(this, arguments);\n                a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + \"With\"](this === d ? c.promise() : this, g ? [a] : arguments);\n              });\n            }), a = null;\n          }).promise();\n        },\n        promise: function promise(a) {\n          return null != a ? m.extend(a, d) : d;\n        }\n      },\n          e = {};\n      return d.pipe = d.then, m.each(b, function (a, f) {\n        var g = f[2],\n            h = f[3];\n        d[f[1]] = g.add, h && g.add(function () {\n          c = h;\n        }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {\n          return e[f[0] + \"With\"](this === e ? d : this, arguments), this;\n        }, e[f[0] + \"With\"] = g.fireWith;\n      }), d.promise(e), a && a.call(e, e), e;\n    },\n    when: function when(a) {\n      var b = 0,\n          c = d.call(arguments),\n          e = c.length,\n          f = 1 !== e || a && m.isFunction(a.promise) ? e : 0,\n          g = 1 === f ? a : m.Deferred(),\n          h = function h(a, b, c) {\n        return function (e) {\n          b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);\n        };\n      },\n          i,\n          j,\n          k;\n\n      if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) {\n        c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;\n      }\n      return f || g.resolveWith(k, c), g.promise();\n    }\n  });\n  var H;\n  m.fn.ready = function (a) {\n    return m.ready.promise().done(a), this;\n  }, m.extend({\n    isReady: !1,\n    readyWait: 1,\n    holdReady: function holdReady(a) {\n      a ? m.readyWait++ : m.ready(!0);\n    },\n    ready: function ready(a) {\n      if (a === !0 ? ! --m.readyWait : !m.isReady) {\n        if (!y.body) return setTimeout(m.ready);\n        m.isReady = !0, a !== !0 && --m.readyWait > 0 || (H.resolveWith(y, [m]), m.fn.triggerHandler && (m(y).triggerHandler(\"ready\"), m(y).off(\"ready\")));\n      }\n    }\n  });\n\n  function I() {\n    y.addEventListener ? (y.removeEventListener(\"DOMContentLoaded\", J, !1), a.removeEventListener(\"load\", J, !1)) : (y.detachEvent(\"onreadystatechange\", J), a.detachEvent(\"onload\", J));\n  }\n\n  function J() {\n    (y.addEventListener || \"load\" === event.type || \"complete\" === y.readyState) && (I(), m.ready());\n  }\n\n  m.ready.promise = function (b) {\n    if (!H) if (H = m.Deferred(), \"complete\" === y.readyState) setTimeout(m.ready);else if (y.addEventListener) y.addEventListener(\"DOMContentLoaded\", J, !1), a.addEventListener(\"load\", J, !1);else {\n      y.attachEvent(\"onreadystatechange\", J), a.attachEvent(\"onload\", J);\n      var c = !1;\n\n      try {\n        c = null == a.frameElement && y.documentElement;\n      } catch (d) {}\n\n      c && c.doScroll && !function e() {\n        if (!m.isReady) {\n          try {\n            c.doScroll(\"left\");\n          } catch (a) {\n            return setTimeout(e, 50);\n          }\n\n          I(), m.ready();\n        }\n      }();\n    }\n    return H.promise(b);\n  };\n\n  var K = \"undefined\",\n      L;\n\n  for (L in m(k)) {\n    break;\n  }\n\n  k.ownLast = \"0\" !== L, k.inlineBlockNeedsLayout = !1, m(function () {\n    var a, b, c, d;\n    c = y.getElementsByTagName(\"body\")[0], c && c.style && (b = y.createElement(\"div\"), d = y.createElement(\"div\"), d.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\", c.appendChild(d).appendChild(b), _typeof(b.style.zoom) !== K && (b.style.cssText = \"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\", k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(d));\n  }), function () {\n    var a = y.createElement(\"div\");\n\n    if (null == k.deleteExpando) {\n      k.deleteExpando = !0;\n\n      try {\n        delete a.test;\n      } catch (b) {\n        k.deleteExpando = !1;\n      }\n    }\n\n    a = null;\n  }(), m.acceptData = function (a) {\n    var b = m.noData[(a.nodeName + \" \").toLowerCase()],\n        c = +a.nodeType || 1;\n    return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute(\"classid\") === b;\n  };\n  var M = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      N = /([A-Z])/g;\n\n  function O(a, b, c) {\n    if (void 0 === c && 1 === a.nodeType) {\n      var d = \"data-\" + b.replace(N, \"-$1\").toLowerCase();\n\n      if (c = a.getAttribute(d), \"string\" == typeof c) {\n        try {\n          c = \"true\" === c ? !0 : \"false\" === c ? !1 : \"null\" === c ? null : +c + \"\" === c ? +c : M.test(c) ? m.parseJSON(c) : c;\n        } catch (e) {}\n\n        m.data(a, b, c);\n      } else c = void 0;\n    }\n\n    return c;\n  }\n\n  function P(a) {\n    var b;\n\n    for (b in a) {\n      if ((\"data\" !== b || !m.isEmptyObject(a[b])) && \"toJSON\" !== b) return !1;\n    }\n\n    return !0;\n  }\n\n  function Q(a, b, d, e) {\n    if (m.acceptData(a)) {\n      var f,\n          g,\n          h = m.expando,\n          i = a.nodeType,\n          j = i ? m.cache : a,\n          k = i ? a[h] : a[h] && h;\n      if (k && j[k] && (e || j[k].data) || void 0 !== d || \"string\" != typeof b) return k || (k = i ? a[h] = c.pop() || m.guid++ : h), j[k] || (j[k] = i ? {} : {\n        toJSON: m.noop\n      }), (\"object\" == _typeof(b) || \"function\" == typeof b) && (e ? j[k] = m.extend(j[k], b) : j[k].data = m.extend(j[k].data, b)), g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[m.camelCase(b)] = d), \"string\" == typeof b ? (f = g[b], null == f && (f = g[m.camelCase(b)])) : f = g, f;\n    }\n  }\n\n  function R(a, b, c) {\n    if (m.acceptData(a)) {\n      var d,\n          e,\n          f = a.nodeType,\n          g = f ? m.cache : a,\n          h = f ? a[m.expando] : m.expando;\n\n      if (g[h]) {\n        if (b && (d = c ? g[h] : g[h].data)) {\n          m.isArray(b) ? b = b.concat(m.map(b, m.camelCase)) : b in d ? b = [b] : (b = m.camelCase(b), b = b in d ? [b] : b.split(\" \")), e = b.length;\n\n          while (e--) {\n            delete d[b[e]];\n          }\n\n          if (c ? !P(d) : !m.isEmptyObject(d)) return;\n        }\n\n        (c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([a], !0) : k.deleteExpando || g != g.window ? delete g[h] : g[h] = null);\n      }\n    }\n  }\n\n  m.extend({\n    cache: {},\n    noData: {\n      \"applet \": !0,\n      \"embed \": !0,\n      \"object \": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n    },\n    hasData: function hasData(a) {\n      return a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando], !!a && !P(a);\n    },\n    data: function data(a, b, c) {\n      return Q(a, b, c);\n    },\n    removeData: function removeData(a, b) {\n      return R(a, b);\n    },\n    _data: function _data(a, b, c) {\n      return Q(a, b, c, !0);\n    },\n    _removeData: function _removeData(a, b) {\n      return R(a, b, !0);\n    }\n  }), m.fn.extend({\n    data: function data(a, b) {\n      var c,\n          d,\n          e,\n          f = this[0],\n          g = f && f.attributes;\n\n      if (void 0 === a) {\n        if (this.length && (e = m.data(f), 1 === f.nodeType && !m._data(f, \"parsedAttrs\"))) {\n          c = g.length;\n\n          while (c--) {\n            g[c] && (d = g[c].name, 0 === d.indexOf(\"data-\") && (d = m.camelCase(d.slice(5)), O(f, d, e[d])));\n          }\n\n          m._data(f, \"parsedAttrs\", !0);\n        }\n\n        return e;\n      }\n\n      return \"object\" == _typeof(a) ? this.each(function () {\n        m.data(this, a);\n      }) : arguments.length > 1 ? this.each(function () {\n        m.data(this, a, b);\n      }) : f ? O(f, a, m.data(f, a)) : void 0;\n    },\n    removeData: function removeData(a) {\n      return this.each(function () {\n        m.removeData(this, a);\n      });\n    }\n  }), m.extend({\n    queue: function queue(a, b, c) {\n      var d;\n      return a ? (b = (b || \"fx\") + \"queue\", d = m._data(a, b), c && (!d || m.isArray(c) ? d = m._data(a, b, m.makeArray(c)) : d.push(c)), d || []) : void 0;\n    },\n    dequeue: function dequeue(a, b) {\n      b = b || \"fx\";\n\n      var c = m.queue(a, b),\n          d = c.length,\n          e = c.shift(),\n          f = m._queueHooks(a, b),\n          g = function g() {\n        m.dequeue(a, b);\n      };\n\n      \"inprogress\" === e && (e = c.shift(), d--), e && (\"fx\" === b && c.unshift(\"inprogress\"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();\n    },\n    _queueHooks: function _queueHooks(a, b) {\n      var c = b + \"queueHooks\";\n      return m._data(a, c) || m._data(a, c, {\n        empty: m.Callbacks(\"once memory\").add(function () {\n          m._removeData(a, b + \"queue\"), m._removeData(a, c);\n        })\n      });\n    }\n  }), m.fn.extend({\n    queue: function queue(a, b) {\n      var c = 2;\n      return \"string\" != typeof a && (b = a, a = \"fx\", c--), arguments.length < c ? m.queue(this[0], a) : void 0 === b ? this : this.each(function () {\n        var c = m.queue(this, a, b);\n        m._queueHooks(this, a), \"fx\" === a && \"inprogress\" !== c[0] && m.dequeue(this, a);\n      });\n    },\n    dequeue: function dequeue(a) {\n      return this.each(function () {\n        m.dequeue(this, a);\n      });\n    },\n    clearQueue: function clearQueue(a) {\n      return this.queue(a || \"fx\", []);\n    },\n    promise: function promise(a, b) {\n      var c,\n          d = 1,\n          e = m.Deferred(),\n          f = this,\n          g = this.length,\n          h = function h() {\n        --d || e.resolveWith(f, [f]);\n      };\n\n      \"string\" != typeof a && (b = a, a = void 0), a = a || \"fx\";\n\n      while (g--) {\n        c = m._data(f[g], a + \"queueHooks\"), c && c.empty && (d++, c.empty.add(h));\n      }\n\n      return h(), e.promise(b);\n    }\n  });\n\n  var S = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n      T = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      U = function U(a, b) {\n    return a = b || a, \"none\" === m.css(a, \"display\") || !m.contains(a.ownerDocument, a);\n  },\n      V = m.access = function (a, b, c, d, e, f, g) {\n    var h = 0,\n        i = a.length,\n        j = null == c;\n\n    if (\"object\" === m.type(c)) {\n      e = !0;\n\n      for (h in c) {\n        m.access(a, b, h, c[h], !0, f, g);\n      }\n    } else if (void 0 !== d && (e = !0, m.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b2, c) {\n      return j.call(m(a), c);\n    })), b)) for (; i > h; h++) {\n      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));\n    }\n\n    return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;\n  },\n      W = /^(?:checkbox|radio)$/i;\n\n  !function () {\n    var a = y.createElement(\"input\"),\n        b = y.createElement(\"div\"),\n        c = y.createDocumentFragment();\n\n    if (b.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\", k.leadingWhitespace = 3 === b.firstChild.nodeType, k.tbody = !b.getElementsByTagName(\"tbody\").length, k.htmlSerialize = !!b.getElementsByTagName(\"link\").length, k.html5Clone = \"<:nav></:nav>\" !== y.createElement(\"nav\").cloneNode(!0).outerHTML, a.type = \"checkbox\", a.checked = !0, c.appendChild(a), k.appendChecked = a.checked, b.innerHTML = \"<textarea>x</textarea>\", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, c.appendChild(b), b.innerHTML = \"<input type='radio' checked='checked' name='t'/>\", k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, k.noCloneEvent = !0, b.attachEvent && (b.attachEvent(\"onclick\", function () {\n      k.noCloneEvent = !1;\n    }), b.cloneNode(!0).click()), null == k.deleteExpando) {\n      k.deleteExpando = !0;\n\n      try {\n        delete b.test;\n      } catch (d) {\n        k.deleteExpando = !1;\n      }\n    }\n  }(), function () {\n    var b,\n        c,\n        d = y.createElement(\"div\");\n\n    for (b in {\n      submit: !0,\n      change: !0,\n      focusin: !0\n    }) {\n      c = \"on\" + b, (k[b + \"Bubbles\"] = c in a) || (d.setAttribute(c, \"t\"), k[b + \"Bubbles\"] = d.attributes[c].expando === !1);\n    }\n\n    d = null;\n  }();\n  var X = /^(?:input|select|textarea)$/i,\n      Y = /^key/,\n      Z = /^(?:mouse|pointer|contextmenu)|click/,\n      $ = /^(?:focusinfocus|focusoutblur)$/,\n      _ = /^([^.]*)(?:\\.(.+)|)$/;\n\n  function ab() {\n    return !0;\n  }\n\n  function bb() {\n    return !1;\n  }\n\n  function cb() {\n    try {\n      return y.activeElement;\n    } catch (a) {}\n  }\n\n  m.event = {\n    global: {},\n    add: function add(a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          n,\n          o,\n          p,\n          q,\n          r = m._data(a);\n\n      if (r) {\n        c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = m.guid++), (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function (a) {\n          return _typeof(m) === K || a && m.event.triggered === a.type ? void 0 : m.event.dispatch.apply(k.elem, arguments);\n        }, k.elem = a), b = (b || \"\").match(E) || [\"\"], h = b.length;\n\n        while (h--) {\n          f = _.exec(b[h]) || [], o = q = f[1], p = (f[2] || \"\").split(\".\").sort(), o && (j = m.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, j = m.event.special[o] || {}, l = m.extend({\n            type: o,\n            origType: q,\n            data: d,\n            handler: c,\n            guid: c.guid,\n            selector: e,\n            needsContext: e && m.expr.match.needsContext.test(e),\n            namespace: p.join(\".\")\n          }, i), (n = g[o]) || (n = g[o] = [], n.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent(\"on\" + o, k))), j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? n.splice(n.delegateCount++, 0, l) : n.push(l), m.event.global[o] = !0);\n        }\n\n        a = null;\n      }\n    },\n    remove: function remove(a, b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          n,\n          o,\n          p,\n          q,\n          r = m.hasData(a) && m._data(a);\n\n      if (r && (k = r.events)) {\n        b = (b || \"\").match(E) || [\"\"], j = b.length;\n\n        while (j--) {\n          if (h = _.exec(b[j]) || [], o = q = h[1], p = (h[2] || \"\").split(\".\").sort(), o) {\n            l = m.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, n = k[o] || [], h = h[2] && new RegExp(\"(^|\\\\.)\" + p.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), i = f = n.length;\n\n            while (f--) {\n              g = n[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && (\"**\" !== d || !g.selector) || (n.splice(f, 1), g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));\n            }\n\n            i && !n.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || m.removeEvent(a, o, r.handle), delete k[o]);\n          } else for (o in k) {\n            m.event.remove(a, o + b[j], c, d, !0);\n          }\n        }\n\n        m.isEmptyObject(k) && (delete r.handle, m._removeData(a, \"events\"));\n      }\n    },\n    trigger: function trigger(b, c, d, e) {\n      var f,\n          g,\n          h,\n          i,\n          k,\n          l,\n          n,\n          o = [d || y],\n          p = j.call(b, \"type\") ? b.type : b,\n          q = j.call(b, \"namespace\") ? b.namespace.split(\".\") : [];\n\n      if (h = l = d = d || y, 3 !== d.nodeType && 8 !== d.nodeType && !$.test(p + m.event.triggered) && (p.indexOf(\".\") >= 0 && (q = p.split(\".\"), p = q.shift(), q.sort()), g = p.indexOf(\":\") < 0 && \"on\" + p, b = b[m.expando] ? b : new m.Event(p, \"object\" == _typeof(b) && b), b.isTrigger = e ? 2 : 3, b.namespace = q.join(\".\"), b.namespace_re = b.namespace ? new RegExp(\"(^|\\\\.)\" + q.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : m.makeArray(c, [b]), k = m.event.special[p] || {}, e || !k.trigger || k.trigger.apply(d, c) !== !1)) {\n        if (!e && !k.noBubble && !m.isWindow(d)) {\n          for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode) {\n            o.push(h), l = h;\n          }\n\n          l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a);\n        }\n\n        n = 0;\n\n        while ((h = o[n++]) && !b.isPropagationStopped()) {\n          b.type = n > 1 ? i : k.bindType || p, f = (m._data(h, \"events\") || {})[b.type] && m._data(h, \"handle\"), f && f.apply(h, c), f = g && h[g], f && f.apply && m.acceptData(h) && (b.result = f.apply(h, c), b.result === !1 && b.preventDefault());\n        }\n\n        if (b.type = p, !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && m.acceptData(d) && g && d[p] && !m.isWindow(d)) {\n          l = d[g], l && (d[g] = null), m.event.triggered = p;\n\n          try {\n            d[p]();\n          } catch (r) {}\n\n          m.event.triggered = void 0, l && (d[g] = l);\n        }\n\n        return b.result;\n      }\n    },\n    dispatch: function dispatch(a) {\n      a = m.event.fix(a);\n      var b,\n          c,\n          e,\n          f,\n          g,\n          h = [],\n          i = d.call(arguments),\n          j = (m._data(this, \"events\") || {})[a.type] || [],\n          k = m.event.special[a.type] || {};\n\n      if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {\n        h = m.event.handlers.call(this, a, j), b = 0;\n\n        while ((f = h[b++]) && !a.isPropagationStopped()) {\n          a.currentTarget = f.elem, g = 0;\n\n          while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped()) {\n            (!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, a.data = e.data, c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i), void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation()));\n          }\n        }\n\n        return k.postDispatch && k.postDispatch.call(this, a), a.result;\n      }\n    },\n    handlers: function handlers(a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g = [],\n          h = b.delegateCount,\n          i = a.target;\n      if (h && i.nodeType && (!a.button || \"click\" !== a.type)) for (; i != this; i = i.parentNode || this) {\n        if (1 === i.nodeType && (i.disabled !== !0 || \"click\" !== a.type)) {\n          for (e = [], f = 0; h > f; f++) {\n            d = b[f], c = d.selector + \" \", void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [i]).length), e[c] && e.push(d);\n          }\n\n          e.length && g.push({\n            elem: i,\n            handlers: e\n          });\n        }\n      }\n      return h < b.length && g.push({\n        elem: this,\n        handlers: b.slice(h)\n      }), g;\n    },\n    fix: function fix(a) {\n      if (a[m.expando]) return a;\n      var b,\n          c,\n          d,\n          e = a.type,\n          f = a,\n          g = this.fixHooks[e];\n      g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new m.Event(f), b = d.length;\n\n      while (b--) {\n        c = d[b], a[c] = f[c];\n      }\n\n      return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a;\n    },\n    props: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n    fixHooks: {},\n    keyHooks: {\n      props: \"char charCode key keyCode\".split(\" \"),\n      filter: function filter(a, b) {\n        return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;\n      }\n    },\n    mouseHooks: {\n      props: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n      filter: function filter(a, b) {\n        var c,\n            d,\n            e,\n            f = b.button,\n            g = b.fromElement;\n        return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || y, e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;\n      }\n    },\n    special: {\n      load: {\n        noBubble: !0\n      },\n      focus: {\n        trigger: function trigger() {\n          if (this !== cb() && this.focus) try {\n            return this.focus(), !1;\n          } catch (a) {}\n        },\n        delegateType: \"focusin\"\n      },\n      blur: {\n        trigger: function trigger() {\n          return this === cb() && this.blur ? (this.blur(), !1) : void 0;\n        },\n        delegateType: \"focusout\"\n      },\n      click: {\n        trigger: function trigger() {\n          return m.nodeName(this, \"input\") && \"checkbox\" === this.type && this.click ? (this.click(), !1) : void 0;\n        },\n        _default: function _default(a) {\n          return m.nodeName(a.target, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(a) {\n          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);\n        }\n      }\n    },\n    simulate: function simulate(a, b, c, d) {\n      var e = m.extend(new m.Event(), c, {\n        type: a,\n        isSimulated: !0,\n        originalEvent: {}\n      });\n      d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();\n    }\n  }, m.removeEvent = y.removeEventListener ? function (a, b, c) {\n    a.removeEventListener && a.removeEventListener(b, c, !1);\n  } : function (a, b, c) {\n    var d = \"on\" + b;\n    a.detachEvent && (_typeof(a[d]) === K && (a[d] = null), a.detachEvent(d, c));\n  }, m.Event = function (a, b) {\n    return this instanceof m.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ab : bb) : this.type = a, b && m.extend(this, b), this.timeStamp = a && a.timeStamp || m.now(), void (this[m.expando] = !0)) : new m.Event(a, b);\n  }, m.Event.prototype = {\n    isDefaultPrevented: bb,\n    isPropagationStopped: bb,\n    isImmediatePropagationStopped: bb,\n    preventDefault: function preventDefault() {\n      var a = this.originalEvent;\n      this.isDefaultPrevented = ab, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1);\n    },\n    stopPropagation: function stopPropagation() {\n      var a = this.originalEvent;\n      this.isPropagationStopped = ab, a && (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0);\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var a = this.originalEvent;\n      this.isImmediatePropagationStopped = ab, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();\n    }\n  }, m.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (a, b) {\n    m.event.special[a] = {\n      delegateType: b,\n      bindType: b,\n      handle: function handle(a) {\n        var c,\n            d = this,\n            e = a.relatedTarget,\n            f = a.handleObj;\n        return (!e || e !== d && !m.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;\n      }\n    };\n  }), k.submitBubbles || (m.event.special.submit = {\n    setup: function setup() {\n      return m.nodeName(this, \"form\") ? !1 : void m.event.add(this, \"click._submit keypress._submit\", function (a) {\n        var b = a.target,\n            c = m.nodeName(b, \"input\") || m.nodeName(b, \"button\") ? b.form : void 0;\n        c && !m._data(c, \"submitBubbles\") && (m.event.add(c, \"submit._submit\", function (a) {\n          a._submit_bubble = !0;\n        }), m._data(c, \"submitBubbles\", !0));\n      });\n    },\n    postDispatch: function postDispatch(a) {\n      a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate(\"submit\", this.parentNode, a, !0));\n    },\n    teardown: function teardown() {\n      return m.nodeName(this, \"form\") ? !1 : void m.event.remove(this, \"._submit\");\n    }\n  }), k.changeBubbles || (m.event.special.change = {\n    setup: function setup() {\n      return X.test(this.nodeName) ? ((\"checkbox\" === this.type || \"radio\" === this.type) && (m.event.add(this, \"propertychange._change\", function (a) {\n        \"checked\" === a.originalEvent.propertyName && (this._just_changed = !0);\n      }), m.event.add(this, \"click._change\", function (a) {\n        this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate(\"change\", this, a, !0);\n      })), !1) : void m.event.add(this, \"beforeactivate._change\", function (a) {\n        var b = a.target;\n        X.test(b.nodeName) && !m._data(b, \"changeBubbles\") && (m.event.add(b, \"change._change\", function (a) {\n          !this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate(\"change\", this.parentNode, a, !0);\n        }), m._data(b, \"changeBubbles\", !0));\n      });\n    },\n    handle: function handle(a) {\n      var b = a.target;\n      return this !== b || a.isSimulated || a.isTrigger || \"radio\" !== b.type && \"checkbox\" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0;\n    },\n    teardown: function teardown() {\n      return m.event.remove(this, \"._change\"), !X.test(this.nodeName);\n    }\n  }), k.focusinBubbles || m.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (a, b) {\n    var c = function c(a) {\n      m.event.simulate(b, a.target, m.event.fix(a), !0);\n    };\n\n    m.event.special[b] = {\n      setup: function setup() {\n        var d = this.ownerDocument || this,\n            e = m._data(d, b);\n\n        e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1);\n      },\n      teardown: function teardown() {\n        var d = this.ownerDocument || this,\n            e = m._data(d, b) - 1;\n        e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b));\n      }\n    };\n  }), m.fn.extend({\n    on: function on(a, b, c, d, e) {\n      var f, g;\n\n      if (\"object\" == _typeof(a)) {\n        \"string\" != typeof b && (c = c || b, b = void 0);\n\n        for (f in a) {\n          this.on(f, b, c, a[f], e);\n        }\n\n        return this;\n      }\n\n      if (null == c && null == d ? (d = b, c = b = void 0) : null == d && (\"string\" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = bb;else if (!d) return this;\n      return 1 === e && (g = d, d = function d(a) {\n        return m().off(a), g.apply(this, arguments);\n      }, d.guid = g.guid || (g.guid = m.guid++)), this.each(function () {\n        m.event.add(this, a, d, c, b);\n      });\n    },\n    one: function one(a, b, c, d) {\n      return this.on(a, b, c, d, 1);\n    },\n    off: function off(a, b, c) {\n      var d, e;\n      if (a && a.preventDefault && a.handleObj) return d = a.handleObj, m(a.delegateTarget).off(d.namespace ? d.origType + \".\" + d.namespace : d.origType, d.selector, d.handler), this;\n\n      if (\"object\" == _typeof(a)) {\n        for (e in a) {\n          this.off(e, b, a[e]);\n        }\n\n        return this;\n      }\n\n      return (b === !1 || \"function\" == typeof b) && (c = b, b = void 0), c === !1 && (c = bb), this.each(function () {\n        m.event.remove(this, a, c, b);\n      });\n    },\n    trigger: function trigger(a, b) {\n      return this.each(function () {\n        m.event.trigger(a, b, this);\n      });\n    },\n    triggerHandler: function triggerHandler(a, b) {\n      var c = this[0];\n      return c ? m.event.trigger(a, b, c, !0) : void 0;\n    }\n  });\n\n  function db(a) {\n    var b = eb.split(\"|\"),\n        c = a.createDocumentFragment();\n    if (c.createElement) while (b.length) {\n      c.createElement(b.pop());\n    }\n    return c;\n  }\n\n  var eb = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n      fb = / jQuery\\d+=\"(?:null|\\d+)\"/g,\n      gb = new RegExp(\"<(?:\" + eb + \")[\\\\s/>]\", \"i\"),\n      hb = /^\\s+/,\n      ib = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n      jb = /<([\\w:]+)/,\n      kb = /<tbody/i,\n      lb = /<|&#?\\w+;/,\n      mb = /<(?:script|style|link)/i,\n      nb = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      ob = /^$|\\/(?:java|ecma)script/i,\n      pb = /^true\\/(.*)/,\n      qb = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n      rb = {\n    option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n    legend: [1, \"<fieldset>\", \"</fieldset>\"],\n    area: [1, \"<map>\", \"</map>\"],\n    param: [1, \"<object>\", \"</object>\"],\n    thead: [1, \"<table>\", \"</table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    col: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: k.htmlSerialize ? [0, \"\", \"\"] : [1, \"X<div>\", \"</div>\"]\n  },\n      sb = db(y),\n      tb = sb.appendChild(y.createElement(\"div\"));\n  rb.optgroup = rb.option, rb.tbody = rb.tfoot = rb.colgroup = rb.caption = rb.thead, rb.th = rb.td;\n\n  function ub(a, b) {\n    var c,\n        d,\n        e = 0,\n        f = _typeof(a.getElementsByTagName) !== K ? a.getElementsByTagName(b || \"*\") : _typeof(a.querySelectorAll) !== K ? a.querySelectorAll(b || \"*\") : void 0;\n    if (!f) for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) {\n      !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ub(d, b));\n    }\n    return void 0 === b || b && m.nodeName(a, b) ? m.merge([a], f) : f;\n  }\n\n  function vb(a) {\n    W.test(a.type) && (a.defaultChecked = a.checked);\n  }\n\n  function wb(a, b) {\n    return m.nodeName(a, \"table\") && m.nodeName(11 !== b.nodeType ? b : b.firstChild, \"tr\") ? a.getElementsByTagName(\"tbody\")[0] || a.appendChild(a.ownerDocument.createElement(\"tbody\")) : a;\n  }\n\n  function xb(a) {\n    return a.type = (null !== m.find.attr(a, \"type\")) + \"/\" + a.type, a;\n  }\n\n  function yb(a) {\n    var b = pb.exec(a.type);\n    return b ? a.type = b[1] : a.removeAttribute(\"type\"), a;\n  }\n\n  function zb(a, b) {\n    for (var c, d = 0; null != (c = a[d]); d++) {\n      m._data(c, \"globalEval\", !b || m._data(b[d], \"globalEval\"));\n    }\n  }\n\n  function Ab(a, b) {\n    if (1 === b.nodeType && m.hasData(a)) {\n      var c,\n          d,\n          e,\n          f = m._data(a),\n          g = m._data(b, f),\n          h = f.events;\n\n      if (h) {\n        delete g.handle, g.events = {};\n\n        for (c in h) {\n          for (d = 0, e = h[c].length; e > d; d++) {\n            m.event.add(b, c, h[c][d]);\n          }\n        }\n      }\n\n      g.data && (g.data = m.extend({}, g.data));\n    }\n  }\n\n  function Bb(a, b) {\n    var c, d, e;\n\n    if (1 === b.nodeType) {\n      if (c = b.nodeName.toLowerCase(), !k.noCloneEvent && b[m.expando]) {\n        e = m._data(b);\n\n        for (d in e.events) {\n          m.removeEvent(b, d, e.handle);\n        }\n\n        b.removeAttribute(m.expando);\n      }\n\n      \"script\" === c && b.text !== a.text ? (xb(b).text = a.text, yb(b)) : \"object\" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : \"input\" === c && W.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : \"option\" === c ? b.defaultSelected = b.selected = a.defaultSelected : (\"input\" === c || \"textarea\" === c) && (b.defaultValue = a.defaultValue);\n    }\n  }\n\n  m.extend({\n    clone: function clone(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h,\n          i = m.contains(a.ownerDocument, a);\n      if (k.html5Clone || m.isXMLDoc(a) || !gb.test(\"<\" + a.nodeName + \">\") ? f = a.cloneNode(!0) : (tb.innerHTML = a.outerHTML, tb.removeChild(f = tb.firstChild)), !(k.noCloneEvent && k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || m.isXMLDoc(a))) for (d = ub(f), h = ub(a), g = 0; null != (e = h[g]); ++g) {\n        d[g] && Bb(e, d[g]);\n      }\n      if (b) if (c) for (h = h || ub(a), d = d || ub(f), g = 0; null != (e = h[g]); g++) {\n        Ab(e, d[g]);\n      } else Ab(a, f);\n      return d = ub(f, \"script\"), d.length > 0 && zb(d, !i && ub(a, \"script\")), d = h = e = null, f;\n    },\n    buildFragment: function buildFragment(a, b, c, d) {\n      for (var e, f, g, h, i, j, l, n = a.length, o = db(b), p = [], q = 0; n > q; q++) {\n        if (f = a[q], f || 0 === f) if (\"object\" === m.type(f)) m.merge(p, f.nodeType ? [f] : f);else if (lb.test(f)) {\n          h = h || o.appendChild(b.createElement(\"div\")), i = (jb.exec(f) || [\"\", \"\"])[1].toLowerCase(), l = rb[i] || rb._default, h.innerHTML = l[1] + f.replace(ib, \"<$1></$2>\") + l[2], e = l[0];\n\n          while (e--) {\n            h = h.lastChild;\n          }\n\n          if (!k.leadingWhitespace && hb.test(f) && p.push(b.createTextNode(hb.exec(f)[0])), !k.tbody) {\n            f = \"table\" !== i || kb.test(f) ? \"<table>\" !== l[1] || kb.test(f) ? 0 : h : h.firstChild, e = f && f.childNodes.length;\n\n            while (e--) {\n              m.nodeName(j = f.childNodes[e], \"tbody\") && !j.childNodes.length && f.removeChild(j);\n            }\n          }\n\n          m.merge(p, h.childNodes), h.textContent = \"\";\n\n          while (h.firstChild) {\n            h.removeChild(h.firstChild);\n          }\n\n          h = o.lastChild;\n        } else p.push(b.createTextNode(f));\n      }\n\n      h && o.removeChild(h), k.appendChecked || m.grep(ub(p, \"input\"), vb), q = 0;\n\n      while (f = p[q++]) {\n        if ((!d || -1 === m.inArray(f, d)) && (g = m.contains(f.ownerDocument, f), h = ub(o.appendChild(f), \"script\"), g && zb(h), c)) {\n          e = 0;\n\n          while (f = h[e++]) {\n            ob.test(f.type || \"\") && c.push(f);\n          }\n        }\n      }\n\n      return h = null, o;\n    },\n    cleanData: function cleanData(a, b) {\n      for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++) {\n        if ((b || m.acceptData(d)) && (f = d[i], g = f && j[f])) {\n          if (g.events) for (e in g.events) {\n            n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);\n          }\n          j[f] && (delete j[f], l ? delete d[i] : _typeof(d.removeAttribute) !== K ? d.removeAttribute(i) : d[i] = null, c.push(f));\n        }\n      }\n    }\n  }), m.fn.extend({\n    text: function text(a) {\n      return V(this, function (a) {\n        return void 0 === a ? m.text(this) : this.empty().append((this[0] && this[0].ownerDocument || y).createTextNode(a));\n      }, null, a, arguments.length);\n    },\n    append: function append() {\n      return this.domManip(arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = wb(this, a);\n          b.appendChild(a);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return this.domManip(arguments, function (a) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var b = wb(this, a);\n          b.insertBefore(a, b.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return this.domManip(arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this);\n      });\n    },\n    after: function after() {\n      return this.domManip(arguments, function (a) {\n        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);\n      });\n    },\n    remove: function remove(a, b) {\n      for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++) {\n        b || 1 !== c.nodeType || m.cleanData(ub(c)), c.parentNode && (b && m.contains(c.ownerDocument, c) && zb(ub(c, \"script\")), c.parentNode.removeChild(c));\n      }\n\n      return this;\n    },\n    empty: function empty() {\n      for (var a, b = 0; null != (a = this[b]); b++) {\n        1 === a.nodeType && m.cleanData(ub(a, !1));\n\n        while (a.firstChild) {\n          a.removeChild(a.firstChild);\n        }\n\n        a.options && m.nodeName(a, \"select\") && (a.options.length = 0);\n      }\n\n      return this;\n    },\n    clone: function clone(a, b) {\n      return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {\n        return m.clone(this, a, b);\n      });\n    },\n    html: function html(a) {\n      return V(this, function (a) {\n        var b = this[0] || {},\n            c = 0,\n            d = this.length;\n        if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(fb, \"\") : void 0;\n\n        if (!(\"string\" != typeof a || mb.test(a) || !k.htmlSerialize && gb.test(a) || !k.leadingWhitespace && hb.test(a) || rb[(jb.exec(a) || [\"\", \"\"])[1].toLowerCase()])) {\n          a = a.replace(ib, \"<$1></$2>\");\n\n          try {\n            for (; d > c; c++) {\n              b = this[c] || {}, 1 === b.nodeType && (m.cleanData(ub(b, !1)), b.innerHTML = a);\n            }\n\n            b = 0;\n          } catch (e) {}\n        }\n\n        b && this.empty().append(a);\n      }, null, a, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var a = arguments[0];\n      return this.domManip(arguments, function (b) {\n        a = this.parentNode, m.cleanData(ub(this)), a && a.replaceChild(b, this);\n      }), a && (a.length || a.nodeType) ? this : this.remove();\n    },\n    detach: function detach(a) {\n      return this.remove(a, !0);\n    },\n    domManip: function domManip(a, b) {\n      a = e.apply([], a);\n      var c,\n          d,\n          f,\n          g,\n          h,\n          i,\n          j = 0,\n          l = this.length,\n          n = this,\n          o = l - 1,\n          p = a[0],\n          q = m.isFunction(p);\n      if (q || l > 1 && \"string\" == typeof p && !k.checkClone && nb.test(p)) return this.each(function (c) {\n        var d = n.eq(c);\n        q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);\n      });\n\n      if (l && (i = m.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 1 === i.childNodes.length && (i = c), c)) {\n        for (g = m.map(ub(i, \"script\"), xb), f = g.length; l > j; j++) {\n          d = i, j !== o && (d = m.clone(d, !0, !0), f && m.merge(g, ub(d, \"script\"))), b.call(this[j], d, j);\n        }\n\n        if (f) for (h = g[g.length - 1].ownerDocument, m.map(g, yb), j = 0; f > j; j++) {\n          d = g[j], ob.test(d.type || \"\") && !m._data(d, \"globalEval\") && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || \"\").replace(qb, \"\")));\n        }\n        i = c = null;\n      }\n\n      return this;\n    }\n  }), m.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (a, b) {\n    m.fn[a] = function (a) {\n      for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) {\n        c = d === h ? this : this.clone(!0), m(g[d])[b](c), f.apply(e, c.get());\n      }\n\n      return this.pushStack(e);\n    };\n  });\n  var Cb,\n      Db = {};\n\n  function Eb(b, c) {\n    var d,\n        e = m(c.createElement(b)).appendTo(c.body),\n        f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], \"display\");\n    return e.detach(), f;\n  }\n\n  function Fb(a) {\n    var b = y,\n        c = Db[a];\n    return c || (c = Eb(a, b), \"none\" !== c && c || (Cb = (Cb || m(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(b.documentElement), b = (Cb[0].contentWindow || Cb[0].contentDocument).document, b.write(), b.close(), c = Eb(a, b), Cb.detach()), Db[a] = c), c;\n  }\n\n  !function () {\n    var a;\n\n    k.shrinkWrapBlocks = function () {\n      if (null != a) return a;\n      a = !1;\n      var b, c, d;\n      return c = y.getElementsByTagName(\"body\")[0], c && c.style ? (b = y.createElement(\"div\"), d = y.createElement(\"div\"), d.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\", c.appendChild(d).appendChild(b), _typeof(b.style.zoom) !== K && (b.style.cssText = \"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1\", b.appendChild(y.createElement(\"div\")).style.width = \"5px\", a = 3 !== b.offsetWidth), c.removeChild(d), a) : void 0;\n    };\n  }();\n  var Gb = /^margin/,\n      Hb = new RegExp(\"^(\" + S + \")(?!px)[a-z%]+$\", \"i\"),\n      Ib,\n      Jb,\n      Kb = /^(top|right|bottom|left)$/;\n  a.getComputedStyle ? (Ib = function Ib(a) {\n    return a.ownerDocument.defaultView.getComputedStyle(a, null);\n  }, Jb = function Jb(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.style;\n    return c = c || Ib(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && (\"\" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)), Hb.test(g) && Gb.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + \"\";\n  }) : y.documentElement.currentStyle && (Ib = function Ib(a) {\n    return a.currentStyle;\n  }, Jb = function Jb(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.style;\n    return c = c || Ib(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), Hb.test(g) && !Kb.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), h.left = \"fontSize\" === b ? \"1em\" : g, g = h.pixelLeft + \"px\", h.left = d, f && (e.left = f)), void 0 === g ? g : g + \"\" || \"auto\";\n  });\n\n  function Lb(a, b) {\n    return {\n      get: function get() {\n        var c = a();\n        if (null != c) return c ? void delete this.get : (this.get = b).apply(this, arguments);\n      }\n    };\n  }\n\n  !function () {\n    var b, c, d, e, f, g, h;\n\n    if (b = y.createElement(\"div\"), b.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\", d = b.getElementsByTagName(\"a\")[0], c = d && d.style) {\n      var _i = function _i() {\n        var b, c, d, i;\n        c = y.getElementsByTagName(\"body\")[0], c && c.style && (b = y.createElement(\"div\"), d = y.createElement(\"div\"), d.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\", c.appendChild(d).appendChild(b), b.style.cssText = \"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute\", e = f = !1, h = !0, a.getComputedStyle && (e = \"1%\" !== (a.getComputedStyle(b, null) || {}).top, f = \"4px\" === (a.getComputedStyle(b, null) || {\n          width: \"4px\"\n        }).width, i = b.appendChild(y.createElement(\"div\")), i.style.cssText = b.style.cssText = \"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0\", i.style.marginRight = i.style.width = \"0\", b.style.width = \"1px\", h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight)), b.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\", i = b.getElementsByTagName(\"td\"), i[0].style.cssText = \"margin:0;border:0;padding:0;display:none\", g = 0 === i[0].offsetHeight, g && (i[0].style.display = \"\", i[1].style.display = \"none\", g = 0 === i[0].offsetHeight), c.removeChild(d));\n      };\n\n      c.cssText = \"float:left;opacity:.5\", k.opacity = \"0.5\" === c.opacity, k.cssFloat = !!c.cssFloat, b.style.backgroundClip = \"content-box\", b.cloneNode(!0).style.backgroundClip = \"\", k.clearCloneStyle = \"content-box\" === b.style.backgroundClip, k.boxSizing = \"\" === c.boxSizing || \"\" === c.MozBoxSizing || \"\" === c.WebkitBoxSizing, m.extend(k, {\n        reliableHiddenOffsets: function reliableHiddenOffsets() {\n          return null == g && _i(), g;\n        },\n        boxSizingReliable: function boxSizingReliable() {\n          return null == f && _i(), f;\n        },\n        pixelPosition: function pixelPosition() {\n          return null == e && _i(), e;\n        },\n        reliableMarginRight: function reliableMarginRight() {\n          return null == h && _i(), h;\n        }\n      });\n    }\n  }(), m.swap = function (a, b, c, d) {\n    var e,\n        f,\n        g = {};\n\n    for (f in b) {\n      g[f] = a.style[f], a.style[f] = b[f];\n    }\n\n    e = c.apply(a, d || []);\n\n    for (f in b) {\n      a.style[f] = g[f];\n    }\n\n    return e;\n  };\n  var Mb = /alpha\\([^)]*\\)/i,\n      Nb = /opacity\\s*=\\s*([^)]*)/,\n      Ob = /^(none|table(?!-c[ea]).+)/,\n      Pb = new RegExp(\"^(\" + S + \")(.*)$\", \"i\"),\n      Qb = new RegExp(\"^([+-])=(\" + S + \")\", \"i\"),\n      Rb = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      Sb = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  },\n      Tb = [\"Webkit\", \"O\", \"Moz\", \"ms\"];\n\n  function Ub(a, b) {\n    if (b in a) return b;\n    var c = b.charAt(0).toUpperCase() + b.slice(1),\n        d = b,\n        e = Tb.length;\n\n    while (e--) {\n      if (b = Tb[e] + c, b in a) return b;\n    }\n\n    return d;\n  }\n\n  function Vb(a, b) {\n    for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) {\n      d = a[g], d.style && (f[g] = m._data(d, \"olddisplay\"), c = d.style.display, b ? (f[g] || \"none\" !== c || (d.style.display = \"\"), \"\" === d.style.display && U(d) && (f[g] = m._data(d, \"olddisplay\", Fb(d.nodeName)))) : (e = U(d), (c && \"none\" !== c || !e) && m._data(d, \"olddisplay\", e ? c : m.css(d, \"display\"))));\n    }\n\n    for (g = 0; h > g; g++) {\n      d = a[g], d.style && (b && \"none\" !== d.style.display && \"\" !== d.style.display || (d.style.display = b ? f[g] || \"\" : \"none\"));\n    }\n\n    return a;\n  }\n\n  function Wb(a, b, c) {\n    var d = Pb.exec(b);\n    return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || \"px\") : b;\n  }\n\n  function Xb(a, b, c, d, e) {\n    for (var f = c === (d ? \"border\" : \"content\") ? 4 : \"width\" === b ? 1 : 0, g = 0; 4 > f; f += 2) {\n      \"margin\" === c && (g += m.css(a, c + T[f], !0, e)), d ? (\"content\" === c && (g -= m.css(a, \"padding\" + T[f], !0, e)), \"margin\" !== c && (g -= m.css(a, \"border\" + T[f] + \"Width\", !0, e))) : (g += m.css(a, \"padding\" + T[f], !0, e), \"padding\" !== c && (g += m.css(a, \"border\" + T[f] + \"Width\", !0, e)));\n    }\n\n    return g;\n  }\n\n  function Yb(a, b, c) {\n    var d = !0,\n        e = \"width\" === b ? a.offsetWidth : a.offsetHeight,\n        f = Ib(a),\n        g = k.boxSizing && \"border-box\" === m.css(a, \"boxSizing\", !1, f);\n\n    if (0 >= e || null == e) {\n      if (e = Jb(a, b, f), (0 > e || null == e) && (e = a.style[b]), Hb.test(e)) return e;\n      d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;\n    }\n\n    return e + Xb(a, b, c || (g ? \"border\" : \"content\"), d, f) + \"px\";\n  }\n\n  m.extend({\n    cssHooks: {\n      opacity: {\n        get: function get(a, b) {\n          if (b) {\n            var c = Jb(a, \"opacity\");\n            return \"\" === c ? \"1\" : c;\n          }\n        }\n      }\n    },\n    cssNumber: {\n      columnCount: !0,\n      fillOpacity: !0,\n      flexGrow: !0,\n      flexShrink: !0,\n      fontWeight: !0,\n      lineHeight: !0,\n      opacity: !0,\n      order: !0,\n      orphans: !0,\n      widows: !0,\n      zIndex: !0,\n      zoom: !0\n    },\n    cssProps: {\n      \"float\": k.cssFloat ? \"cssFloat\" : \"styleFloat\"\n    },\n    style: function style(a, b, c, d) {\n      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {\n        var e,\n            f,\n            g,\n            h = m.camelCase(b),\n            i = a.style;\n        if (b = m.cssProps[h] || (m.cssProps[h] = Ub(i, h)), g = m.cssHooks[b] || m.cssHooks[h], void 0 === c) return g && \"get\" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];\n        if (f = _typeof(c), \"string\" === f && (e = Qb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b)), f = \"number\"), null != c && c === c && (\"number\" !== f || m.cssNumber[h] || (c += \"px\"), k.clearCloneStyle || \"\" !== c || 0 !== b.indexOf(\"background\") || (i[b] = \"inherit\"), !(g && \"set\" in g && void 0 === (c = g.set(a, c, d))))) try {\n          i[b] = c;\n        } catch (j) {}\n      }\n    },\n    css: function css(a, b, c, d) {\n      var e,\n          f,\n          g,\n          h = m.camelCase(b);\n      return b = m.cssProps[h] || (m.cssProps[h] = Ub(a.style, h)), g = m.cssHooks[b] || m.cssHooks[h], g && \"get\" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Jb(a, b, d)), \"normal\" === f && b in Sb && (f = Sb[b]), \"\" === c || c ? (e = parseFloat(f), c === !0 || m.isNumeric(e) ? e || 0 : f) : f;\n    }\n  }), m.each([\"height\", \"width\"], function (a, b) {\n    m.cssHooks[b] = {\n      get: function get(a, c, d) {\n        return c ? Ob.test(m.css(a, \"display\")) && 0 === a.offsetWidth ? m.swap(a, Rb, function () {\n          return Yb(a, b, d);\n        }) : Yb(a, b, d) : void 0;\n      },\n      set: function set(a, c, d) {\n        var e = d && Ib(a);\n        return Wb(a, c, d ? Xb(a, b, d, k.boxSizing && \"border-box\" === m.css(a, \"boxSizing\", !1, e), e) : 0);\n      }\n    };\n  }), k.opacity || (m.cssHooks.opacity = {\n    get: function get(a, b) {\n      return Nb.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || \"\") ? .01 * parseFloat(RegExp.$1) + \"\" : b ? \"1\" : \"\";\n    },\n    set: function set(a, b) {\n      var c = a.style,\n          d = a.currentStyle,\n          e = m.isNumeric(b) ? \"alpha(opacity=\" + 100 * b + \")\" : \"\",\n          f = d && d.filter || c.filter || \"\";\n      c.zoom = 1, (b >= 1 || \"\" === b) && \"\" === m.trim(f.replace(Mb, \"\")) && c.removeAttribute && (c.removeAttribute(\"filter\"), \"\" === b || d && !d.filter) || (c.filter = Mb.test(f) ? f.replace(Mb, e) : f + \" \" + e);\n    }\n  }), m.cssHooks.marginRight = Lb(k.reliableMarginRight, function (a, b) {\n    return b ? m.swap(a, {\n      display: \"inline-block\"\n    }, Jb, [a, \"marginRight\"]) : void 0;\n  }), m.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (a, b) {\n    m.cssHooks[a + b] = {\n      expand: function expand(c) {\n        for (var d = 0, e = {}, f = \"string\" == typeof c ? c.split(\" \") : [c]; 4 > d; d++) {\n          e[a + T[d] + b] = f[d] || f[d - 2] || f[0];\n        }\n\n        return e;\n      }\n    }, Gb.test(a) || (m.cssHooks[a + b].set = Wb);\n  }), m.fn.extend({\n    css: function css(a, b) {\n      return V(this, function (a, b, c) {\n        var d,\n            e,\n            f = {},\n            g = 0;\n\n        if (m.isArray(b)) {\n          for (d = Ib(a), e = b.length; e > g; g++) {\n            f[b[g]] = m.css(a, b[g], !1, d);\n          }\n\n          return f;\n        }\n\n        return void 0 !== c ? m.style(a, b, c) : m.css(a, b);\n      }, a, b, arguments.length > 1);\n    },\n    show: function show() {\n      return Vb(this, !0);\n    },\n    hide: function hide() {\n      return Vb(this);\n    },\n    toggle: function toggle(a) {\n      return \"boolean\" == typeof a ? a ? this.show() : this.hide() : this.each(function () {\n        U(this) ? m(this).show() : m(this).hide();\n      });\n    }\n  });\n\n  function Zb(a, b, c, d, e) {\n    return new Zb.prototype.init(a, b, c, d, e);\n  }\n\n  m.Tween = Zb, Zb.prototype = {\n    constructor: Zb,\n    init: function init(a, b, c, d, e, f) {\n      this.elem = a, this.prop = c, this.easing = e || \"swing\", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (m.cssNumber[c] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var a = Zb.propHooks[this.prop];\n      return a && a.get ? a.get(this) : Zb.propHooks._default.get(this);\n    },\n    run: function run(a) {\n      var b,\n          c = Zb.propHooks[this.prop];\n      return this.pos = b = this.options.duration ? m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Zb.propHooks._default.set(this), this;\n    }\n  }, Zb.prototype.init.prototype = Zb.prototype, Zb.propHooks = {\n    _default: {\n      get: function get(a) {\n        var b;\n        return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = m.css(a.elem, a.prop, \"\"), b && \"auto\" !== b ? b : 0) : a.elem[a.prop];\n      },\n      set: function set(a) {\n        m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;\n      }\n    }\n  }, Zb.propHooks.scrollTop = Zb.propHooks.scrollLeft = {\n    set: function set(a) {\n      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);\n    }\n  }, m.easing = {\n    linear: function linear(a) {\n      return a;\n    },\n    swing: function swing(a) {\n      return .5 - Math.cos(a * Math.PI) / 2;\n    }\n  }, m.fx = Zb.prototype.init, m.fx.step = {};\n\n  var $b,\n      _b,\n      ac = /^(?:toggle|show|hide)$/,\n      bc = new RegExp(\"^(?:([+-])=|)(\" + S + \")([a-z%]*)$\", \"i\"),\n      cc = /queueHooks$/,\n      dc = [ic],\n      ec = {\n    \"*\": [function (a, b) {\n      var c = this.createTween(a, b),\n          d = c.cur(),\n          e = bc.exec(b),\n          f = e && e[3] || (m.cssNumber[a] ? \"\" : \"px\"),\n          g = (m.cssNumber[a] || \"px\" !== f && +d) && bc.exec(m.css(c.elem, a)),\n          h = 1,\n          i = 20;\n\n      if (g && g[3] !== f) {\n        f = f || g[3], e = e || [], g = +d || 1;\n\n        do {\n          h = h || \".5\", g /= h, m.style(c.elem, a, g + f);\n        } while (h !== (h = c.cur() / d) && 1 !== h && --i);\n      }\n\n      return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;\n    }]\n  };\n\n  function fc() {\n    return setTimeout(function () {\n      $b = void 0;\n    }), $b = m.now();\n  }\n\n  function gc(a, b) {\n    var c,\n        d = {\n      height: a\n    },\n        e = 0;\n\n    for (b = b ? 1 : 0; 4 > e; e += 2 - b) {\n      c = T[e], d[\"margin\" + c] = d[\"padding\" + c] = a;\n    }\n\n    return b && (d.opacity = d.width = a), d;\n  }\n\n  function hc(a, b, c) {\n    for (var d, e = (ec[b] || []).concat(ec[\"*\"]), f = 0, g = e.length; g > f; f++) {\n      if (d = e[f].call(c, b, a)) return d;\n    }\n  }\n\n  function ic(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        l,\n        n = this,\n        o = {},\n        p = a.style,\n        q = a.nodeType && U(a),\n        r = m._data(a, \"fxshow\");\n\n    c.queue || (h = m._queueHooks(a, \"fx\"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {\n      h.unqueued || i();\n    }), h.unqueued++, n.always(function () {\n      n.always(function () {\n        h.unqueued--, m.queue(a, \"fx\").length || h.empty.fire();\n      });\n    })), 1 === a.nodeType && (\"height\" in b || \"width\" in b) && (c.overflow = [p.overflow, p.overflowX, p.overflowY], j = m.css(a, \"display\"), l = \"none\" === j ? m._data(a, \"olddisplay\") || Fb(a.nodeName) : j, \"inline\" === l && \"none\" === m.css(a, \"float\") && (k.inlineBlockNeedsLayout && \"inline\" !== Fb(a.nodeName) ? p.zoom = 1 : p.display = \"inline-block\")), c.overflow && (p.overflow = \"hidden\", k.shrinkWrapBlocks() || n.always(function () {\n      p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2];\n    }));\n\n    for (d in b) {\n      if (e = b[d], ac.exec(e)) {\n        if (delete b[d], f = f || \"toggle\" === e, e === (q ? \"hide\" : \"show\")) {\n          if (\"show\" !== e || !r || void 0 === r[d]) continue;\n          q = !0;\n        }\n\n        o[d] = r && r[d] || m.style(a, d);\n      } else j = void 0;\n    }\n\n    if (m.isEmptyObject(o)) \"inline\" === (\"none\" === j ? Fb(a.nodeName) : j) && (p.display = j);else {\n      r ? \"hidden\" in r && (q = r.hidden) : r = m._data(a, \"fxshow\", {}), f && (r.hidden = !q), q ? m(a).show() : n.done(function () {\n        m(a).hide();\n      }), n.done(function () {\n        var b;\n\n        m._removeData(a, \"fxshow\");\n\n        for (b in o) {\n          m.style(a, b, o[b]);\n        }\n      });\n\n      for (d in o) {\n        g = hc(q ? r[d] : 0, d, n), d in r || (r[d] = g.start, q && (g.end = g.start, g.start = \"width\" === d || \"height\" === d ? 1 : 0));\n      }\n    }\n  }\n\n  function jc(a, b) {\n    var c, d, e, f, g;\n\n    for (c in a) {\n      if (d = m.camelCase(c), e = b[d], f = a[c], m.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = m.cssHooks[d], g && \"expand\" in g) {\n        f = g.expand(f), delete a[d];\n\n        for (c in f) {\n          c in a || (a[c] = f[c], b[c] = e);\n        }\n      } else b[d] = e;\n    }\n  }\n\n  function kc(a, b, c) {\n    var d,\n        e,\n        f = 0,\n        g = dc.length,\n        h = m.Deferred().always(function () {\n      delete i.elem;\n    }),\n        i = function i() {\n      if (e) return !1;\n\n      for (var b = $b || fc(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) {\n        j.tweens[g].run(f);\n      }\n\n      return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);\n    },\n        j = h.promise({\n      elem: a,\n      props: m.extend({}, b),\n      opts: m.extend(!0, {\n        specialEasing: {}\n      }, c),\n      originalProperties: b,\n      originalOptions: c,\n      startTime: $b || fc(),\n      duration: c.duration,\n      tweens: [],\n      createTween: function createTween(b, c) {\n        var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);\n        return j.tweens.push(d), d;\n      },\n      stop: function stop(b) {\n        var c = 0,\n            d = b ? j.tweens.length : 0;\n        if (e) return this;\n\n        for (e = !0; d > c; c++) {\n          j.tweens[c].run(1);\n        }\n\n        return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;\n      }\n    }),\n        k = j.props;\n\n    for (jc(k, j.opts.specialEasing); g > f; f++) {\n      if (d = dc[f].call(j, a, k, j.opts)) return d;\n    }\n\n    return m.map(k, hc, j), m.isFunction(j.opts.start) && j.opts.start.call(a, j), m.fx.timer(m.extend(i, {\n      elem: a,\n      anim: j,\n      queue: j.opts.queue\n    })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);\n  }\n\n  m.Animation = m.extend(kc, {\n    tweener: function tweener(a, b) {\n      m.isFunction(a) ? (b = a, a = [\"*\"]) : a = a.split(\" \");\n\n      for (var c, d = 0, e = a.length; e > d; d++) {\n        c = a[d], ec[c] = ec[c] || [], ec[c].unshift(b);\n      }\n    },\n    prefilter: function prefilter(a, b) {\n      b ? dc.unshift(a) : dc.push(a);\n    }\n  }), m.speed = function (a, b, c) {\n    var d = a && \"object\" == _typeof(a) ? m.extend({}, a) : {\n      complete: c || !c && b || m.isFunction(a) && a,\n      duration: a,\n      easing: c && b || b && !m.isFunction(b) && b\n    };\n    return d.duration = m.fx.off ? 0 : \"number\" == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = \"fx\"), d.old = d.complete, d.complete = function () {\n      m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue);\n    }, d;\n  }, m.fn.extend({\n    fadeTo: function fadeTo(a, b, c, d) {\n      return this.filter(U).css(\"opacity\", 0).show().end().animate({\n        opacity: b\n      }, a, c, d);\n    },\n    animate: function animate(a, b, c, d) {\n      var e = m.isEmptyObject(a),\n          f = m.speed(b, c, d),\n          g = function g() {\n        var b = kc(this, m.extend({}, a), f);\n        (e || m._data(this, \"finish\")) && b.stop(!0);\n      };\n\n      return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);\n    },\n    stop: function stop(a, b, c) {\n      var d = function d(a) {\n        var b = a.stop;\n        delete a.stop, b(c);\n      };\n\n      return \"string\" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || \"fx\", []), this.each(function () {\n        var b = !0,\n            e = null != a && a + \"queueHooks\",\n            f = m.timers,\n            g = m._data(this);\n\n        if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {\n          g[e] && g[e].stop && cc.test(e) && d(g[e]);\n        }\n\n        for (e = f.length; e--;) {\n          f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));\n        }\n\n        (b || !c) && m.dequeue(this, a);\n      });\n    },\n    finish: function finish(a) {\n      return a !== !1 && (a = a || \"fx\"), this.each(function () {\n        var b,\n            c = m._data(this),\n            d = c[a + \"queue\"],\n            e = c[a + \"queueHooks\"],\n            f = m.timers,\n            g = d ? d.length : 0;\n\n        for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {\n          f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));\n        }\n\n        for (b = 0; g > b; b++) {\n          d[b] && d[b].finish && d[b].finish.call(this);\n        }\n\n        delete c.finish;\n      });\n    }\n  }), m.each([\"toggle\", \"show\", \"hide\"], function (a, b) {\n    var c = m.fn[b];\n\n    m.fn[b] = function (a, d, e) {\n      return null == a || \"boolean\" == typeof a ? c.apply(this, arguments) : this.animate(gc(b, !0), a, d, e);\n    };\n  }), m.each({\n    slideDown: gc(\"show\"),\n    slideUp: gc(\"hide\"),\n    slideToggle: gc(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (a, b) {\n    m.fn[a] = function (a, c, d) {\n      return this.animate(b, a, c, d);\n    };\n  }), m.timers = [], m.fx.tick = function () {\n    var a,\n        b = m.timers,\n        c = 0;\n\n    for ($b = m.now(); c < b.length; c++) {\n      a = b[c], a() || b[c] !== a || b.splice(c--, 1);\n    }\n\n    b.length || m.fx.stop(), $b = void 0;\n  }, m.fx.timer = function (a) {\n    m.timers.push(a), a() ? m.fx.start() : m.timers.pop();\n  }, m.fx.interval = 13, m.fx.start = function () {\n    _b || (_b = setInterval(m.fx.tick, m.fx.interval));\n  }, m.fx.stop = function () {\n    clearInterval(_b), _b = null;\n  }, m.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    _default: 400\n  }, m.fn.delay = function (a, b) {\n    return a = m.fx ? m.fx.speeds[a] || a : a, b = b || \"fx\", this.queue(b, function (b, c) {\n      var d = setTimeout(b, a);\n\n      c.stop = function () {\n        clearTimeout(d);\n      };\n    });\n  }, function () {\n    var a, b, c, d, e;\n    b = y.createElement(\"div\"), b.setAttribute(\"className\", \"t\"), b.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\", d = b.getElementsByTagName(\"a\")[0], c = y.createElement(\"select\"), e = c.appendChild(y.createElement(\"option\")), a = b.getElementsByTagName(\"input\")[0], d.style.cssText = \"top:1px\", k.getSetAttribute = \"t\" !== b.className, k.style = /top/.test(d.getAttribute(\"style\")), k.hrefNormalized = \"/a\" === d.getAttribute(\"href\"), k.checkOn = !!a.value, k.optSelected = e.selected, k.enctype = !!y.createElement(\"form\").enctype, c.disabled = !0, k.optDisabled = !e.disabled, a = y.createElement(\"input\"), a.setAttribute(\"value\", \"\"), k.input = \"\" === a.getAttribute(\"value\"), a.value = \"t\", a.setAttribute(\"type\", \"radio\"), k.radioValue = \"t\" === a.value;\n  }();\n  var lc = /\\r/g;\n  m.fn.extend({\n    val: function val(a) {\n      var b,\n          c,\n          d,\n          e = this[0];\n      {\n        if (arguments.length) return d = m.isFunction(a), this.each(function (c) {\n          var e;\n          1 === this.nodeType && (e = d ? a.call(this, c, m(this).val()) : a, null == e ? e = \"\" : \"number\" == typeof e ? e += \"\" : m.isArray(e) && (e = m.map(e, function (a) {\n            return null == a ? \"\" : a + \"\";\n          })), b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()], b && \"set\" in b && void 0 !== b.set(this, e, \"value\") || (this.value = e));\n        });\n        if (e) return b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()], b && \"get\" in b && void 0 !== (c = b.get(e, \"value\")) ? c : (c = e.value, \"string\" == typeof c ? c.replace(lc, \"\") : null == c ? \"\" : c);\n      }\n    }\n  }), m.extend({\n    valHooks: {\n      option: {\n        get: function get(a) {\n          var b = m.find.attr(a, \"value\");\n          return null != b ? b : m.trim(m.text(a));\n        }\n      },\n      select: {\n        get: function get(a) {\n          for (var b, c, d = a.options, e = a.selectedIndex, f = \"select-one\" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) {\n            if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute(\"disabled\")) || c.parentNode.disabled && m.nodeName(c.parentNode, \"optgroup\"))) {\n              if (b = m(c).val(), f) return b;\n              g.push(b);\n            }\n          }\n\n          return g;\n        },\n        set: function set(a, b) {\n          var c,\n              d,\n              e = a.options,\n              f = m.makeArray(b),\n              g = e.length;\n\n          while (g--) {\n            if (d = e[g], m.inArray(m.valHooks.option.get(d), f) >= 0) try {\n              d.selected = c = !0;\n            } catch (h) {\n              d.scrollHeight;\n            } else d.selected = !1;\n          }\n\n          return c || (a.selectedIndex = -1), e;\n        }\n      }\n    }\n  }), m.each([\"radio\", \"checkbox\"], function () {\n    m.valHooks[this] = {\n      set: function set(a, b) {\n        return m.isArray(b) ? a.checked = m.inArray(m(a).val(), b) >= 0 : void 0;\n      }\n    }, k.checkOn || (m.valHooks[this].get = function (a) {\n      return null === a.getAttribute(\"value\") ? \"on\" : a.value;\n    });\n  });\n  var mc,\n      nc,\n      oc = m.expr.attrHandle,\n      pc = /^(?:checked|selected)$/i,\n      qc = k.getSetAttribute,\n      rc = k.input;\n  m.fn.extend({\n    attr: function attr(a, b) {\n      return V(this, m.attr, a, b, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(a) {\n      return this.each(function () {\n        m.removeAttr(this, a);\n      });\n    }\n  }), m.extend({\n    attr: function attr(a, b, c) {\n      var d,\n          e,\n          f = a.nodeType;\n      if (a && 3 !== f && 8 !== f && 2 !== f) return _typeof(a.getAttribute) === K ? m.prop(a, b, c) : (1 === f && m.isXMLDoc(a) || (b = b.toLowerCase(), d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nc : mc)), void 0 === c ? d && \"get\" in d && null !== (e = d.get(a, b)) ? e : (e = m.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && \"set\" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + \"\"), c) : void m.removeAttr(a, b));\n    },\n    removeAttr: function removeAttr(a, b) {\n      var c,\n          d,\n          e = 0,\n          f = b && b.match(E);\n      if (f && 1 === a.nodeType) while (c = f[e++]) {\n        d = m.propFix[c] || c, m.expr.match.bool.test(c) ? rc && qc || !pc.test(c) ? a[d] = !1 : a[m.camelCase(\"default-\" + c)] = a[d] = !1 : m.attr(a, c, \"\"), a.removeAttribute(qc ? c : d);\n      }\n    },\n    attrHooks: {\n      type: {\n        set: function set(a, b) {\n          if (!k.radioValue && \"radio\" === b && m.nodeName(a, \"input\")) {\n            var c = a.value;\n            return a.setAttribute(\"type\", b), c && (a.value = c), b;\n          }\n        }\n      }\n    }\n  }), nc = {\n    set: function set(a, b, c) {\n      return b === !1 ? m.removeAttr(a, c) : rc && qc || !pc.test(c) ? a.setAttribute(!qc && m.propFix[c] || c, c) : a[m.camelCase(\"default-\" + c)] = a[c] = !0, c;\n    }\n  }, m.each(m.expr.match.bool.source.match(/\\w+/g), function (a, b) {\n    var c = oc[b] || m.find.attr;\n    oc[b] = rc && qc || !pc.test(b) ? function (a, b, d) {\n      var e, f;\n      return d || (f = oc[b], oc[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, oc[b] = f), e;\n    } : function (a, b, c) {\n      return c ? void 0 : a[m.camelCase(\"default-\" + b)] ? b.toLowerCase() : null;\n    };\n  }), rc && qc || (m.attrHooks.value = {\n    set: function set(a, b, c) {\n      return m.nodeName(a, \"input\") ? void (a.defaultValue = b) : mc && mc.set(a, b, c);\n    }\n  }), qc || (mc = {\n    set: function set(a, b, c) {\n      var d = a.getAttributeNode(c);\n      return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += \"\", \"value\" === c || b === a.getAttribute(c) ? b : void 0;\n    }\n  }, oc.id = oc.name = oc.coords = function (a, b, c) {\n    var d;\n    return c ? void 0 : (d = a.getAttributeNode(b)) && \"\" !== d.value ? d.value : null;\n  }, m.valHooks.button = {\n    get: function get(a, b) {\n      var c = a.getAttributeNode(b);\n      return c && c.specified ? c.value : void 0;\n    },\n    set: mc.set\n  }, m.attrHooks.contenteditable = {\n    set: function set(a, b, c) {\n      mc.set(a, \"\" === b ? !1 : b, c);\n    }\n  }, m.each([\"width\", \"height\"], function (a, b) {\n    m.attrHooks[b] = {\n      set: function set(a, c) {\n        return \"\" === c ? (a.setAttribute(b, \"auto\"), c) : void 0;\n      }\n    };\n  })), k.style || (m.attrHooks.style = {\n    get: function get(a) {\n      return a.style.cssText || void 0;\n    },\n    set: function set(a, b) {\n      return a.style.cssText = b + \"\";\n    }\n  });\n  var sc = /^(?:input|select|textarea|button|object)$/i,\n      tc = /^(?:a|area)$/i;\n  m.fn.extend({\n    prop: function prop(a, b) {\n      return V(this, m.prop, a, b, arguments.length > 1);\n    },\n    removeProp: function removeProp(a) {\n      return a = m.propFix[a] || a, this.each(function () {\n        try {\n          this[a] = void 0, delete this[a];\n        } catch (b) {}\n      });\n    }\n  }), m.extend({\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    },\n    prop: function prop(a, b, c) {\n      var d,\n          e,\n          f,\n          g = a.nodeType;\n      if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !m.isXMLDoc(a), f && (b = m.propFix[b] || b, e = m.propHooks[b]), void 0 !== c ? e && \"set\" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && \"get\" in e && null !== (d = e.get(a, b)) ? d : a[b];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(a) {\n          var b = m.find.attr(a, \"tabindex\");\n          return b ? parseInt(b, 10) : sc.test(a.nodeName) || tc.test(a.nodeName) && a.href ? 0 : -1;\n        }\n      }\n    }\n  }), k.hrefNormalized || m.each([\"href\", \"src\"], function (a, b) {\n    m.propHooks[b] = {\n      get: function get(a) {\n        return a.getAttribute(b, 4);\n      }\n    };\n  }), k.optSelected || (m.propHooks.selected = {\n    get: function get(a) {\n      var b = a.parentNode;\n      return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;\n    }\n  }), m.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    m.propFix[this.toLowerCase()] = this;\n  }), k.enctype || (m.propFix.enctype = \"encoding\");\n  var uc = /[\\t\\r\\n\\f]/g;\n  m.fn.extend({\n    addClass: function addClass(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = 0,\n          i = this.length,\n          j = \"string\" == typeof a && a;\n      if (m.isFunction(a)) return this.each(function (b) {\n        m(this).addClass(a.call(this, b, this.className));\n      });\n      if (j) for (b = (a || \"\").match(E) || []; i > h; h++) {\n        if (c = this[h], d = 1 === c.nodeType && (c.className ? (\" \" + c.className + \" \").replace(uc, \" \") : \" \")) {\n          f = 0;\n\n          while (e = b[f++]) {\n            d.indexOf(\" \" + e + \" \") < 0 && (d += e + \" \");\n          }\n\n          g = m.trim(d), c.className !== g && (c.className = g);\n        }\n      }\n      return this;\n    },\n    removeClass: function removeClass(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = 0,\n          i = this.length,\n          j = 0 === arguments.length || \"string\" == typeof a && a;\n      if (m.isFunction(a)) return this.each(function (b) {\n        m(this).removeClass(a.call(this, b, this.className));\n      });\n      if (j) for (b = (a || \"\").match(E) || []; i > h; h++) {\n        if (c = this[h], d = 1 === c.nodeType && (c.className ? (\" \" + c.className + \" \").replace(uc, \" \") : \"\")) {\n          f = 0;\n\n          while (e = b[f++]) {\n            while (d.indexOf(\" \" + e + \" \") >= 0) {\n              d = d.replace(\" \" + e + \" \", \" \");\n            }\n          }\n\n          g = a ? m.trim(d) : \"\", c.className !== g && (c.className = g);\n        }\n      }\n      return this;\n    },\n    toggleClass: function toggleClass(a, b) {\n      var c = _typeof(a);\n\n      return \"boolean\" == typeof b && \"string\" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(m.isFunction(a) ? function (c) {\n        m(this).toggleClass(a.call(this, c, this.className, b), b);\n      } : function () {\n        if (\"string\" === c) {\n          var b,\n              d = 0,\n              e = m(this),\n              f = a.match(E) || [];\n\n          while (b = f[d++]) {\n            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);\n          }\n        } else (c === K || \"boolean\" === c) && (this.className && m._data(this, \"__className__\", this.className), this.className = this.className || a === !1 ? \"\" : m._data(this, \"__className__\") || \"\");\n      });\n    },\n    hasClass: function hasClass(a) {\n      for (var b = \" \" + a + \" \", c = 0, d = this.length; d > c; c++) {\n        if (1 === this[c].nodeType && (\" \" + this[c].className + \" \").replace(uc, \" \").indexOf(b) >= 0) return !0;\n      }\n\n      return !1;\n    }\n  }), m.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"), function (a, b) {\n    m.fn[b] = function (a, c) {\n      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);\n    };\n  }), m.fn.extend({\n    hover: function hover(a, b) {\n      return this.mouseenter(a).mouseleave(b || a);\n    },\n    bind: function bind(a, b, c) {\n      return this.on(a, null, b, c);\n    },\n    unbind: function unbind(a, b) {\n      return this.off(a, null, b);\n    },\n    delegate: function delegate(a, b, c, d) {\n      return this.on(b, a, c, d);\n    },\n    undelegate: function undelegate(a, b, c) {\n      return 1 === arguments.length ? this.off(a, \"**\") : this.off(b, a || \"**\", c);\n    }\n  });\n  var vc = m.now(),\n      wc = /\\?/,\n      xc = /(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;\n  m.parseJSON = function (b) {\n    if (a.JSON && a.JSON.parse) return a.JSON.parse(b + \"\");\n    var c,\n        d = null,\n        e = m.trim(b + \"\");\n    return e && !m.trim(e.replace(xc, function (a, b, e, f) {\n      return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, \"\");\n    })) ? Function(\"return \" + e)() : m.error(\"Invalid JSON: \" + b);\n  }, m.parseXML = function (b) {\n    var c, d;\n    if (!b || \"string\" != typeof b) return null;\n\n    try {\n      a.DOMParser ? (d = new DOMParser(), c = d.parseFromString(b, \"text/xml\")) : (c = new ActiveXObject(\"Microsoft.XMLDOM\"), c.async = \"false\", c.loadXML(b));\n    } catch (e) {\n      c = void 0;\n    }\n\n    return c && c.documentElement && !c.getElementsByTagName(\"parsererror\").length || m.error(\"Invalid XML: \" + b), c;\n  };\n  var yc,\n      zc,\n      Ac = /#.*$/,\n      Bc = /([?&])_=[^&]*/,\n      Cc = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm,\n      Dc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      Ec = /^(?:GET|HEAD)$/,\n      Fc = /^\\/\\//,\n      Gc = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\n      Hc = {},\n      Ic = {},\n      Jc = \"*/\".concat(\"*\");\n\n  try {\n    zc = location.href;\n  } catch (Kc) {\n    zc = y.createElement(\"a\"), zc.href = \"\", zc = zc.href;\n  }\n\n  yc = Gc.exec(zc.toLowerCase()) || [];\n\n  function Lc(a) {\n    return function (b, c) {\n      \"string\" != typeof b && (c = b, b = \"*\");\n      var d,\n          e = 0,\n          f = b.toLowerCase().match(E) || [];\n      if (m.isFunction(c)) while (d = f[e++]) {\n        \"+\" === d.charAt(0) ? (d = d.slice(1) || \"*\", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);\n      }\n    };\n  }\n\n  function Mc(a, b, c, d) {\n    var e = {},\n        f = a === Ic;\n\n    function g(h) {\n      var i;\n      return e[h] = !0, m.each(a[h] || [], function (a, h) {\n        var j = h(b, c, d);\n        return \"string\" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);\n      }), i;\n    }\n\n    return g(b.dataTypes[0]) || !e[\"*\"] && g(\"*\");\n  }\n\n  function Nc(a, b) {\n    var c,\n        d,\n        e = m.ajaxSettings.flatOptions || {};\n\n    for (d in b) {\n      void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);\n    }\n\n    return c && m.extend(!0, a, c), a;\n  }\n\n  function Oc(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.contents,\n        i = a.dataTypes;\n\n    while (\"*\" === i[0]) {\n      i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader(\"Content-Type\"));\n    }\n\n    if (e) for (g in h) {\n      if (h[g] && h[g].test(e)) {\n        i.unshift(g);\n        break;\n      }\n    }\n    if (i[0] in c) f = i[0];else {\n      for (g in c) {\n        if (!i[0] || a.converters[g + \" \" + i[0]]) {\n          f = g;\n          break;\n        }\n\n        d || (d = g);\n      }\n\n      f = f || d;\n    }\n    return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;\n  }\n\n  function Pc(a, b, c, d) {\n    var e,\n        f,\n        g,\n        h,\n        i,\n        j = {},\n        k = a.dataTypes.slice();\n    if (k[1]) for (g in a.converters) {\n      j[g.toLowerCase()] = a.converters[g];\n    }\n    f = k.shift();\n\n    while (f) {\n      if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if (\"*\" === f) f = i;else if (\"*\" !== i && i !== f) {\n        if (g = j[i + \" \" + f] || j[\"* \" + f], !g) for (e in j) {\n          if (h = e.split(\" \"), h[1] === f && (g = j[i + \" \" + h[0]] || j[\"* \" + h[0]])) {\n            g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));\n            break;\n          }\n        }\n        if (g !== !0) if (g && a[\"throws\"]) b = g(b);else try {\n          b = g(b);\n        } catch (l) {\n          return {\n            state: \"parsererror\",\n            error: g ? l : \"No conversion from \" + i + \" to \" + f\n          };\n        }\n      }\n    }\n\n    return {\n      state: \"success\",\n      data: b\n    };\n  }\n\n  m.extend({\n    active: 0,\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: zc,\n      type: \"GET\",\n      isLocal: Dc.test(yc[1]),\n      global: !0,\n      processData: !0,\n      async: !0,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      accepts: {\n        \"*\": Jc,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /xml/,\n        html: /html/,\n        json: /json/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      converters: {\n        \"* text\": String,\n        \"text html\": !0,\n        \"text json\": m.parseJSON,\n        \"text xml\": m.parseXML\n      },\n      flatOptions: {\n        url: !0,\n        context: !0\n      }\n    },\n    ajaxSetup: function ajaxSetup(a, b) {\n      return b ? Nc(Nc(a, m.ajaxSettings), b) : Nc(m.ajaxSettings, a);\n    },\n    ajaxPrefilter: Lc(Hc),\n    ajaxTransport: Lc(Ic),\n    ajax: function ajax(a, b) {\n      \"object\" == _typeof(a) && (b = a, a = void 0), b = b || {};\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = m.ajaxSetup({}, b),\n          l = k.context || k,\n          n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event,\n          o = m.Deferred(),\n          p = m.Callbacks(\"once memory\"),\n          q = k.statusCode || {},\n          r = {},\n          s = {},\n          t = 0,\n          u = \"canceled\",\n          v = {\n        readyState: 0,\n        getResponseHeader: function getResponseHeader(a) {\n          var b;\n\n          if (2 === t) {\n            if (!j) {\n              j = {};\n\n              while (b = Cc.exec(f)) {\n                j[b[1].toLowerCase()] = b[2];\n              }\n            }\n\n            b = j[a.toLowerCase()];\n          }\n\n          return null == b ? null : b;\n        },\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return 2 === t ? f : null;\n        },\n        setRequestHeader: function setRequestHeader(a, b) {\n          var c = a.toLowerCase();\n          return t || (a = s[c] = s[c] || a, r[a] = b), this;\n        },\n        overrideMimeType: function overrideMimeType(a) {\n          return t || (k.mimeType = a), this;\n        },\n        statusCode: function statusCode(a) {\n          var b;\n          if (a) if (2 > t) for (b in a) {\n            q[b] = [q[b], a[b]];\n          } else v.always(a[v.status]);\n          return this;\n        },\n        abort: function abort(a) {\n          var b = a || u;\n          return i && i.abort(b), x(0, b), this;\n        }\n      };\n      if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || zc) + \"\").replace(Ac, \"\").replace(Fc, yc[1] + \"//\"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = m.trim(k.dataType || \"*\").toLowerCase().match(E) || [\"\"], null == k.crossDomain && (c = Gc.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === yc[1] && c[2] === yc[2] && (c[3] || (\"http:\" === c[1] ? \"80\" : \"443\")) === (yc[3] || (\"http:\" === yc[1] ? \"80\" : \"443\")))), k.data && k.processData && \"string\" != typeof k.data && (k.data = m.param(k.data, k.traditional)), Mc(Hc, k, b, v), 2 === t) return v;\n      h = k.global, h && 0 === m.active++ && m.event.trigger(\"ajaxStart\"), k.type = k.type.toUpperCase(), k.hasContent = !Ec.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (wc.test(e) ? \"&\" : \"?\") + k.data, delete k.data), k.cache === !1 && (k.url = Bc.test(e) ? e.replace(Bc, \"$1_=\" + vc++) : e + (wc.test(e) ? \"&\" : \"?\") + \"_=\" + vc++)), k.ifModified && (m.lastModified[e] && v.setRequestHeader(\"If-Modified-Since\", m.lastModified[e]), m.etag[e] && v.setRequestHeader(\"If-None-Match\", m.etag[e])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader(\"Content-Type\", k.contentType), v.setRequestHeader(\"Accept\", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + (\"*\" !== k.dataTypes[0] ? \", \" + Jc + \"; q=0.01\" : \"\") : k.accepts[\"*\"]);\n\n      for (d in k.headers) {\n        v.setRequestHeader(d, k.headers[d]);\n      }\n\n      if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();\n      u = \"abort\";\n\n      for (d in {\n        success: 1,\n        error: 1,\n        complete: 1\n      }) {\n        v[d](k[d]);\n      }\n\n      if (i = Mc(Ic, k, b, v)) {\n        v.readyState = 1, h && n.trigger(\"ajaxSend\", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {\n          v.abort(\"timeout\");\n        }, k.timeout));\n\n        try {\n          t = 1, i.send(r, x);\n        } catch (w) {\n          if (!(2 > t)) throw w;\n          x(-1, w);\n        }\n      } else x(-1, \"No Transport\");\n\n      function x(a, b, c, d) {\n        var j,\n            r,\n            s,\n            u,\n            w,\n            x = b;\n        2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || \"\", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, c && (u = Oc(k, v, c)), u = Pc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader(\"Last-Modified\"), w && (m.lastModified[e] = w), w = v.getResponseHeader(\"etag\"), w && (m.etag[e] = w)), 204 === a || \"HEAD\" === k.type ? x = \"nocontent\" : 304 === a ? x = \"notmodified\" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = \"error\", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + \"\", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, h && n.trigger(j ? \"ajaxSuccess\" : \"ajaxError\", [v, k, j ? r : s]), p.fireWith(l, [v, x]), h && (n.trigger(\"ajaxComplete\", [v, k]), --m.active || m.event.trigger(\"ajaxStop\")));\n      }\n\n      return v;\n    },\n    getJSON: function getJSON(a, b, c) {\n      return m.get(a, b, c, \"json\");\n    },\n    getScript: function getScript(a, b) {\n      return m.get(a, void 0, b, \"script\");\n    }\n  }), m.each([\"get\", \"post\"], function (a, b) {\n    m[b] = function (a, c, d, e) {\n      return m.isFunction(c) && (e = e || d, d = c, c = void 0), m.ajax({\n        url: a,\n        type: b,\n        dataType: e,\n        data: c,\n        success: d\n      });\n    };\n  }), m.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (a, b) {\n    m.fn[b] = function (a) {\n      return this.on(b, a);\n    };\n  }), m._evalUrl = function (a) {\n    return m.ajax({\n      url: a,\n      type: \"GET\",\n      dataType: \"script\",\n      async: !1,\n      global: !1,\n      \"throws\": !0\n    });\n  }, m.fn.extend({\n    wrapAll: function wrapAll(a) {\n      if (m.isFunction(a)) return this.each(function (b) {\n        m(this).wrapAll(a.call(this, b));\n      });\n\n      if (this[0]) {\n        var b = m(a, this[0].ownerDocument).eq(0).clone(!0);\n        this[0].parentNode && b.insertBefore(this[0]), b.map(function () {\n          var a = this;\n\n          while (a.firstChild && 1 === a.firstChild.nodeType) {\n            a = a.firstChild;\n          }\n\n          return a;\n        }).append(this);\n      }\n\n      return this;\n    },\n    wrapInner: function wrapInner(a) {\n      return this.each(m.isFunction(a) ? function (b) {\n        m(this).wrapInner(a.call(this, b));\n      } : function () {\n        var b = m(this),\n            c = b.contents();\n        c.length ? c.wrapAll(a) : b.append(a);\n      });\n    },\n    wrap: function wrap(a) {\n      var b = m.isFunction(a);\n      return this.each(function (c) {\n        m(this).wrapAll(b ? a.call(this, c) : a);\n      });\n    },\n    unwrap: function unwrap() {\n      return this.parent().each(function () {\n        m.nodeName(this, \"body\") || m(this).replaceWith(this.childNodes);\n      }).end();\n    }\n  }), m.expr.filters.hidden = function (a) {\n    return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !k.reliableHiddenOffsets() && \"none\" === (a.style && a.style.display || m.css(a, \"display\"));\n  }, m.expr.filters.visible = function (a) {\n    return !m.expr.filters.hidden(a);\n  };\n  var Qc = /%20/g,\n      Rc = /\\[\\]$/,\n      Sc = /\\r?\\n/g,\n      Tc = /^(?:submit|button|image|reset|file)$/i,\n      Uc = /^(?:input|select|textarea|keygen)/i;\n\n  function Vc(a, b, c, d) {\n    var e;\n    if (m.isArray(b)) m.each(b, function (b, e) {\n      c || Rc.test(a) ? d(a, e) : Vc(a + \"[\" + (\"object\" == _typeof(e) ? b : \"\") + \"]\", e, c, d);\n    });else if (c || \"object\" !== m.type(b)) d(a, b);else for (e in b) {\n      Vc(a + \"[\" + e + \"]\", b[e], c, d);\n    }\n  }\n\n  m.param = function (a, b) {\n    var c,\n        d = [],\n        e = function e(a, b) {\n      b = m.isFunction(b) ? b() : null == b ? \"\" : b, d[d.length] = encodeURIComponent(a) + \"=\" + encodeURIComponent(b);\n    };\n\n    if (void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || a.jquery && !m.isPlainObject(a)) m.each(a, function () {\n      e(this.name, this.value);\n    });else for (c in a) {\n      Vc(c, a[c], b, e);\n    }\n    return d.join(\"&\").replace(Qc, \"+\");\n  }, m.fn.extend({\n    serialize: function serialize() {\n      return m.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        var a = m.prop(this, \"elements\");\n        return a ? m.makeArray(a) : this;\n      }).filter(function () {\n        var a = this.type;\n        return this.name && !m(this).is(\":disabled\") && Uc.test(this.nodeName) && !Tc.test(a) && (this.checked || !W.test(a));\n      }).map(function (a, b) {\n        var c = m(this).val();\n        return null == c ? null : m.isArray(c) ? m.map(c, function (a) {\n          return {\n            name: b.name,\n            value: a.replace(Sc, \"\\r\\n\")\n          };\n        }) : {\n          name: b.name,\n          value: c.replace(Sc, \"\\r\\n\")\n        };\n      }).get();\n    }\n  }), m.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function () {\n    return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zc() || $c();\n  } : Zc;\n  var Wc = 0,\n      Xc = {},\n      Yc = m.ajaxSettings.xhr();\n  a.ActiveXObject && m(a).on(\"unload\", function () {\n    for (var a in Xc) {\n      Xc[a](void 0, !0);\n    }\n  }), k.cors = !!Yc && \"withCredentials\" in Yc, Yc = k.ajax = !!Yc, Yc && m.ajaxTransport(function (a) {\n    if (!a.crossDomain || k.cors) {\n      var _b3;\n\n      return {\n        send: function send(c, d) {\n          var e,\n              f = a.xhr(),\n              g = ++Wc;\n          if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) {\n            f[e] = a.xhrFields[e];\n          }\n          a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c[\"X-Requested-With\"] || (c[\"X-Requested-With\"] = \"XMLHttpRequest\");\n\n          for (e in c) {\n            void 0 !== c[e] && f.setRequestHeader(e, c[e] + \"\");\n          }\n\n          f.send(a.hasContent && a.data || null), _b3 = function b(c, e) {\n            var h, i, j;\n            if (_b3 && (e || 4 === f.readyState)) if (delete Xc[g], _b3 = void 0, f.onreadystatechange = m.noop, e) 4 !== f.readyState && f.abort();else {\n              j = {}, h = f.status, \"string\" == typeof f.responseText && (j.text = f.responseText);\n\n              try {\n                i = f.statusText;\n              } catch (k) {\n                i = \"\";\n              }\n\n              h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404;\n            }\n            j && d(h, i, j, f.getAllResponseHeaders());\n          }, a.async ? 4 === f.readyState ? setTimeout(_b3) : f.onreadystatechange = Xc[g] = _b3 : _b3();\n        },\n        abort: function abort() {\n          _b3 && _b3(void 0, !0);\n        }\n      };\n    }\n  });\n\n  function Zc() {\n    try {\n      return new a.XMLHttpRequest();\n    } catch (b) {}\n  }\n\n  function $c() {\n    try {\n      return new a.ActiveXObject(\"Microsoft.XMLHTTP\");\n    } catch (b) {}\n  }\n\n  m.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /(?:java|ecma)script/\n    },\n    converters: {\n      \"text script\": function textScript(a) {\n        return m.globalEval(a), a;\n      }\n    }\n  }), m.ajaxPrefilter(\"script\", function (a) {\n    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = \"GET\", a.global = !1);\n  }), m.ajaxTransport(\"script\", function (a) {\n    if (a.crossDomain) {\n      var b,\n          c = y.head || m(\"head\")[0] || y.documentElement;\n      return {\n        send: function send(d, e) {\n          b = y.createElement(\"script\"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), b.src = a.url, b.onload = b.onreadystatechange = function (a, c) {\n            (c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, \"success\"));\n          }, c.insertBefore(b, c.firstChild);\n        },\n        abort: function abort() {\n          b && b.onload(void 0, !0);\n        }\n      };\n    }\n  });\n  var _c = [],\n      ad = /(=)\\?(?=&|$)|\\?\\?/;\n  m.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var a = _c.pop() || m.expando + \"_\" + vc++;\n      return this[a] = !0, a;\n    }\n  }), m.ajaxPrefilter(\"json jsonp\", function (b, c, d) {\n    var e,\n        f,\n        g,\n        h = b.jsonp !== !1 && (ad.test(b.url) ? \"url\" : \"string\" == typeof b.data && !(b.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && ad.test(b.data) && \"data\");\n    return h || \"jsonp\" === b.dataTypes[0] ? (e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(ad, \"$1\" + e) : b.jsonp !== !1 && (b.url += (wc.test(b.url) ? \"&\" : \"?\") + b.jsonp + \"=\" + e), b.converters[\"script json\"] = function () {\n      return g || m.error(e + \" was not called\"), g[0];\n    }, b.dataTypes[0] = \"json\", f = a[e], a[e] = function () {\n      g = arguments;\n    }, d.always(function () {\n      a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _c.push(e)), g && m.isFunction(f) && f(g[0]), g = f = void 0;\n    }), \"script\") : void 0;\n  }), m.parseHTML = function (a, b, c) {\n    if (!a || \"string\" != typeof a) return null;\n    \"boolean\" == typeof b && (c = b, b = !1), b = b || y;\n    var d = u.exec(a),\n        e = !c && [];\n    return d ? [b.createElement(d[1])] : (d = m.buildFragment([a], b, e), e && e.length && m(e).remove(), m.merge([], d.childNodes));\n  };\n  var bd = m.fn.load;\n  m.fn.load = function (a, b, c) {\n    if (\"string\" != typeof a && bd) return bd.apply(this, arguments);\n    var d,\n        e,\n        f,\n        g = this,\n        h = a.indexOf(\" \");\n    return h >= 0 && (d = m.trim(a.slice(h, a.length)), a = a.slice(0, h)), m.isFunction(b) ? (c = b, b = void 0) : b && \"object\" == _typeof(b) && (f = \"POST\"), g.length > 0 && m.ajax({\n      url: a,\n      type: f,\n      dataType: \"html\",\n      data: b\n    }).done(function (a) {\n      e = arguments, g.html(d ? m(\"<div>\").append(m.parseHTML(a)).find(d) : a);\n    }).complete(c && function (a, b) {\n      g.each(c, e || [a.responseText, b, a]);\n    }), this;\n  }, m.expr.filters.animated = function (a) {\n    return m.grep(m.timers, function (b) {\n      return a === b.elem;\n    }).length;\n  };\n  var cd = a.document.documentElement;\n\n  function dd(a) {\n    return m.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1;\n  }\n\n  m.offset = {\n    setOffset: function setOffset(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = m.css(a, \"position\"),\n          l = m(a),\n          n = {};\n      \"static\" === k && (a.style.position = \"relative\"), h = l.offset(), f = m.css(a, \"top\"), i = m.css(a, \"left\"), j = (\"absolute\" === k || \"fixed\" === k) && m.inArray(\"auto\", [f, i]) > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), m.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (n.top = b.top - h.top + g), null != b.left && (n.left = b.left - h.left + e), \"using\" in b ? b.using.call(a, n) : l.css(n);\n    }\n  }, m.fn.extend({\n    offset: function offset(a) {\n      if (arguments.length) return void 0 === a ? this : this.each(function (b) {\n        m.offset.setOffset(this, a, b);\n      });\n      var b,\n          c,\n          d = {\n        top: 0,\n        left: 0\n      },\n          e = this[0],\n          f = e && e.ownerDocument;\n      if (f) return b = f.documentElement, m.contains(b, e) ? (_typeof(e.getBoundingClientRect) !== K && (d = e.getBoundingClientRect()), c = dd(f), {\n        top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0),\n        left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0)\n      }) : d;\n    },\n    position: function position() {\n      if (this[0]) {\n        var a,\n            b,\n            c = {\n          top: 0,\n          left: 0\n        },\n            d = this[0];\n        return \"fixed\" === m.css(d, \"position\") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), m.nodeName(a[0], \"html\") || (c = a.offset()), c.top += m.css(a[0], \"borderTopWidth\", !0), c.left += m.css(a[0], \"borderLeftWidth\", !0)), {\n          top: b.top - c.top - m.css(d, \"marginTop\", !0),\n          left: b.left - c.left - m.css(d, \"marginLeft\", !0)\n        };\n      }\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var a = this.offsetParent || cd;\n\n        while (a && !m.nodeName(a, \"html\") && \"static\" === m.css(a, \"position\")) {\n          a = a.offsetParent;\n        }\n\n        return a || cd;\n      });\n    }\n  }), m.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (a, b) {\n    var c = /Y/.test(b);\n\n    m.fn[a] = function (d) {\n      return V(this, function (a, d, e) {\n        var f = dd(a);\n        return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void (f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : a[d] = e);\n      }, a, d, arguments.length, null);\n    };\n  }), m.each([\"top\", \"left\"], function (a, b) {\n    m.cssHooks[b] = Lb(k.pixelPosition, function (a, c) {\n      return c ? (c = Jb(a, b), Hb.test(c) ? m(a).position()[b] + \"px\" : c) : void 0;\n    });\n  }), m.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (a, b) {\n    m.each({\n      padding: \"inner\" + a,\n      content: b,\n      \"\": \"outer\" + a\n    }, function (c, d) {\n      m.fn[d] = function (d, e) {\n        var f = arguments.length && (c || \"boolean\" != typeof d),\n            g = c || (d === !0 || e === !0 ? \"margin\" : \"border\");\n        return V(this, function (b, c, d) {\n          var e;\n          return m.isWindow(b) ? b.document.documentElement[\"client\" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body[\"scroll\" + a], e[\"scroll\" + a], b.body[\"offset\" + a], e[\"offset\" + a], e[\"client\" + a])) : void 0 === d ? m.css(b, c, g) : m.style(b, c, d, g);\n        }, b, f ? d : void 0, f, null);\n      };\n    });\n  }), m.fn.size = function () {\n    return this.length;\n  }, m.fn.andSelf = m.fn.addBack,  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return m;\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  var ed = a.jQuery,\n      fd = a.$;\n  return m.noConflict = function (b) {\n    return a.$ === m && (a.$ = fd), b && a.jQuery === m && (a.jQuery = ed), m;\n  }, _typeof(b) === K && (a.jQuery = a.$ = m), m;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/libs/jquery.js\n");

/***/ }),

/***/ "./resources/js/libs/metisMenu.js":
/*!****************************************!*\
  !*** ./resources/js/libs/metisMenu.js ***!
  \****************************************/
/***/ (() => {

eval("/*\n * metismenu - v1.1.3\n * Easy menu jQuery plugin for Twitter Bootstrap 3\n * https://github.com/onokumus/metisMenu\n *\n * Made by Osman Nuri Okumus\n * Under MIT License\n */\n;\n\n(function ($, window, document, undefined) {\n  var pluginName = \"metisMenu\",\n      defaults = {\n    toggle: true,\n    doubleTapToGo: false\n  };\n\n  function Plugin(element, options) {\n    this.element = $(element);\n    this.settings = $.extend({}, defaults, options);\n    this._defaults = defaults;\n    this._name = pluginName;\n    this.init();\n  }\n\n  Plugin.prototype = {\n    init: function init() {\n      var $this = this.element,\n          $toggle = this.settings.toggle,\n          obj = this;\n\n      if (this.isIE() <= 9) {\n        $this.find(\"li.active\").has(\"ul\").children(\"ul\").collapse(\"show\");\n        $this.find(\"li\").not(\".active\").has(\"ul\").children(\"ul\").collapse(\"hide\");\n      } else {\n        $this.find(\"li.active\").has(\"ul\").children(\"ul\").addClass(\"collapse in\");\n        $this.find(\"li\").not(\".active\").has(\"ul\").children(\"ul\").addClass(\"collapse\");\n      } //add the \"doubleTapToGo\" class to active items if needed\n\n\n      if (obj.settings.doubleTapToGo) {\n        $this.find(\"li.active\").has(\"ul\").children(\"a\").addClass(\"doubleTapToGo\");\n      }\n\n      $this.find(\"li\").has(\"ul\").children(\"a\").on(\"click\" + \".\" + pluginName, function (e) {\n        e.preventDefault(); //Do we need to enable the double tap\n\n        if (obj.settings.doubleTapToGo) {\n          //if we hit a second time on the link and the href is valid, navigate to that url\n          if (obj.doubleTapToGo($(this)) && $(this).attr(\"href\") !== \"#\" && $(this).attr(\"href\") !== \"\") {\n            e.stopPropagation();\n            document.location = $(this).attr(\"href\");\n            return;\n          }\n        }\n\n        $(this).parent(\"li\").toggleClass(\"active\").children(\"ul\").collapse(\"toggle\");\n\n        if ($toggle) {\n          $(this).parent(\"li\").siblings().removeClass(\"active\").children(\"ul.in\").collapse(\"hide\");\n        }\n      });\n    },\n    isIE: function isIE() {\n      //https://gist.github.com/padolsey/527683\n      var undef,\n          v = 3,\n          div = document.createElement(\"div\"),\n          all = div.getElementsByTagName(\"i\");\n\n      while (div.innerHTML = \"<!--[if gt IE \" + ++v + \"]><i></i><![endif]-->\", all[0]) {\n        return v > 4 ? v : undef;\n      }\n    },\n    //Enable the link on the second click.\n    doubleTapToGo: function doubleTapToGo(elem) {\n      var $this = this.element; //if the class \"doubleTapToGo\" exists, remove it and return\n\n      if (elem.hasClass(\"doubleTapToGo\")) {\n        elem.removeClass(\"doubleTapToGo\");\n        return true;\n      } //does not exists, add a new class and return false\n\n\n      if (elem.parent().children(\"ul\").length) {\n        //first remove all other class\n        $this.find(\".doubleTapToGo\").removeClass(\"doubleTapToGo\"); //add the class on the current element\n\n        elem.addClass(\"doubleTapToGo\");\n        return false;\n      }\n    },\n    remove: function remove() {\n      this.element.off(\".\" + pluginName);\n      this.element.removeData(pluginName);\n    }\n  };\n\n  $.fn[pluginName] = function (options) {\n    this.each(function () {\n      var el = $(this);\n\n      if (el.data(pluginName)) {\n        el.data(pluginName).remove();\n      }\n\n      el.data(pluginName, new Plugin(this, options));\n    });\n    return this;\n  };\n})(jQuery, window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvbGlicy9tZXRpc01lbnUuanM/MjZkNiJdLCJuYW1lcyI6WyIkIiwid2luZG93IiwiZG9jdW1lbnQiLCJ1bmRlZmluZWQiLCJwbHVnaW5OYW1lIiwiZGVmYXVsdHMiLCJ0b2dnbGUiLCJkb3VibGVUYXBUb0dvIiwiUGx1Z2luIiwiZWxlbWVudCIsIm9wdGlvbnMiLCJzZXR0aW5ncyIsImV4dGVuZCIsIl9kZWZhdWx0cyIsIl9uYW1lIiwiaW5pdCIsInByb3RvdHlwZSIsIiR0aGlzIiwiJHRvZ2dsZSIsIm9iaiIsImlzSUUiLCJmaW5kIiwiaGFzIiwiY2hpbGRyZW4iLCJjb2xsYXBzZSIsIm5vdCIsImFkZENsYXNzIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJhdHRyIiwic3RvcFByb3BhZ2F0aW9uIiwibG9jYXRpb24iLCJwYXJlbnQiLCJ0b2dnbGVDbGFzcyIsInNpYmxpbmdzIiwicmVtb3ZlQ2xhc3MiLCJ1bmRlZiIsInYiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwiYWxsIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbm5lckhUTUwiLCJlbGVtIiwiaGFzQ2xhc3MiLCJsZW5ndGgiLCJyZW1vdmUiLCJvZmYiLCJyZW1vdmVEYXRhIiwiZm4iLCJlYWNoIiwiZWwiLCJkYXRhIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQUMsQ0FBQyxVQUFTQSxDQUFULEVBQVlDLE1BQVosRUFBb0JDLFFBQXBCLEVBQThCQyxTQUE5QixFQUF5QztBQUV2QyxNQUFJQyxVQUFVLEdBQUcsV0FBakI7QUFBQSxNQUNJQyxRQUFRLEdBQUc7QUFDUEMsSUFBQUEsTUFBTSxFQUFFLElBREQ7QUFFUEMsSUFBQUEsYUFBYSxFQUFFO0FBRlIsR0FEZjs7QUFNQSxXQUFTQyxNQUFULENBQWdCQyxPQUFoQixFQUF5QkMsT0FBekIsRUFBa0M7QUFDOUIsU0FBS0QsT0FBTCxHQUFlVCxDQUFDLENBQUNTLE9BQUQsQ0FBaEI7QUFDQSxTQUFLRSxRQUFMLEdBQWdCWCxDQUFDLENBQUNZLE1BQUYsQ0FBUyxFQUFULEVBQWFQLFFBQWIsRUFBdUJLLE9BQXZCLENBQWhCO0FBQ0EsU0FBS0csU0FBTCxHQUFpQlIsUUFBakI7QUFDQSxTQUFLUyxLQUFMLEdBQWFWLFVBQWI7QUFDQSxTQUFLVyxJQUFMO0FBQ0g7O0FBRURQLEVBQUFBLE1BQU0sQ0FBQ1EsU0FBUCxHQUFtQjtBQUNmRCxJQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFFYixVQUFJRSxLQUFLLEdBQUcsS0FBS1IsT0FBakI7QUFBQSxVQUNJUyxPQUFPLEdBQUcsS0FBS1AsUUFBTCxDQUFjTCxNQUQ1QjtBQUFBLFVBRUlhLEdBQUcsR0FBRyxJQUZWOztBQUlBLFVBQUksS0FBS0MsSUFBTCxNQUFlLENBQW5CLEVBQXNCO0FBQ2xCSCxRQUFBQSxLQUFLLENBQUNJLElBQU4sQ0FBVyxXQUFYLEVBQXdCQyxHQUF4QixDQUE0QixJQUE1QixFQUFrQ0MsUUFBbEMsQ0FBMkMsSUFBM0MsRUFBaURDLFFBQWpELENBQTBELE1BQTFEO0FBQ0FQLFFBQUFBLEtBQUssQ0FBQ0ksSUFBTixDQUFXLElBQVgsRUFBaUJJLEdBQWpCLENBQXFCLFNBQXJCLEVBQWdDSCxHQUFoQyxDQUFvQyxJQUFwQyxFQUEwQ0MsUUFBMUMsQ0FBbUQsSUFBbkQsRUFBeURDLFFBQXpELENBQWtFLE1BQWxFO0FBQ0gsT0FIRCxNQUdPO0FBQ0hQLFFBQUFBLEtBQUssQ0FBQ0ksSUFBTixDQUFXLFdBQVgsRUFBd0JDLEdBQXhCLENBQTRCLElBQTVCLEVBQWtDQyxRQUFsQyxDQUEyQyxJQUEzQyxFQUFpREcsUUFBakQsQ0FBMEQsYUFBMUQ7QUFDQVQsUUFBQUEsS0FBSyxDQUFDSSxJQUFOLENBQVcsSUFBWCxFQUFpQkksR0FBakIsQ0FBcUIsU0FBckIsRUFBZ0NILEdBQWhDLENBQW9DLElBQXBDLEVBQTBDQyxRQUExQyxDQUFtRCxJQUFuRCxFQUF5REcsUUFBekQsQ0FBa0UsVUFBbEU7QUFDSCxPQVpZLENBY2I7OztBQUNBLFVBQUlQLEdBQUcsQ0FBQ1IsUUFBSixDQUFhSixhQUFqQixFQUFnQztBQUM1QlUsUUFBQUEsS0FBSyxDQUFDSSxJQUFOLENBQVcsV0FBWCxFQUF3QkMsR0FBeEIsQ0FBNEIsSUFBNUIsRUFBa0NDLFFBQWxDLENBQTJDLEdBQTNDLEVBQWdERyxRQUFoRCxDQUF5RCxlQUF6RDtBQUNIOztBQUVEVCxNQUFBQSxLQUFLLENBQUNJLElBQU4sQ0FBVyxJQUFYLEVBQWlCQyxHQUFqQixDQUFxQixJQUFyQixFQUEyQkMsUUFBM0IsQ0FBb0MsR0FBcEMsRUFBeUNJLEVBQXpDLENBQTRDLFVBQVUsR0FBVixHQUFnQnZCLFVBQTVELEVBQXdFLFVBQVN3QixDQUFULEVBQVk7QUFDaEZBLFFBQUFBLENBQUMsQ0FBQ0MsY0FBRixHQURnRixDQUdoRjs7QUFDQSxZQUFJVixHQUFHLENBQUNSLFFBQUosQ0FBYUosYUFBakIsRUFBZ0M7QUFFNUI7QUFDQSxjQUFJWSxHQUFHLENBQUNaLGFBQUosQ0FBa0JQLENBQUMsQ0FBQyxJQUFELENBQW5CLEtBQThCQSxDQUFDLENBQUMsSUFBRCxDQUFELENBQVE4QixJQUFSLENBQWEsTUFBYixNQUF5QixHQUF2RCxJQUE4RDlCLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUThCLElBQVIsQ0FBYSxNQUFiLE1BQXlCLEVBQTNGLEVBQStGO0FBQzNGRixZQUFBQSxDQUFDLENBQUNHLGVBQUY7QUFDQTdCLFlBQUFBLFFBQVEsQ0FBQzhCLFFBQVQsR0FBb0JoQyxDQUFDLENBQUMsSUFBRCxDQUFELENBQVE4QixJQUFSLENBQWEsTUFBYixDQUFwQjtBQUNBO0FBQ0g7QUFDSjs7QUFFRDlCLFFBQUFBLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUWlDLE1BQVIsQ0FBZSxJQUFmLEVBQXFCQyxXQUFyQixDQUFpQyxRQUFqQyxFQUEyQ1gsUUFBM0MsQ0FBb0QsSUFBcEQsRUFBMERDLFFBQTFELENBQW1FLFFBQW5FOztBQUVBLFlBQUlOLE9BQUosRUFBYTtBQUNUbEIsVUFBQUEsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRaUMsTUFBUixDQUFlLElBQWYsRUFBcUJFLFFBQXJCLEdBQWdDQyxXQUFoQyxDQUE0QyxRQUE1QyxFQUFzRGIsUUFBdEQsQ0FBK0QsT0FBL0QsRUFBd0VDLFFBQXhFLENBQWlGLE1BQWpGO0FBQ0g7QUFFSixPQXBCRDtBQXFCSCxLQXpDYztBQTJDZkosSUFBQUEsSUFBSSxFQUFFLGdCQUFXO0FBQUU7QUFDZixVQUFJaUIsS0FBSjtBQUFBLFVBQ0lDLENBQUMsR0FBRyxDQURSO0FBQUEsVUFFSUMsR0FBRyxHQUFHckMsUUFBUSxDQUFDc0MsYUFBVCxDQUF1QixLQUF2QixDQUZWO0FBQUEsVUFHSUMsR0FBRyxHQUFHRixHQUFHLENBQUNHLG9CQUFKLENBQXlCLEdBQXpCLENBSFY7O0FBS0EsYUFDSUgsR0FBRyxDQUFDSSxTQUFKLEdBQWdCLG1CQUFvQixFQUFFTCxDQUF0QixHQUEyQix1QkFBM0MsRUFDQUcsR0FBRyxDQUFDLENBQUQsQ0FGUCxFQUdFO0FBQ0UsZUFBT0gsQ0FBQyxHQUFHLENBQUosR0FBUUEsQ0FBUixHQUFZRCxLQUFuQjtBQUNIO0FBQ0osS0F2RGM7QUF5RGY7QUFDQTlCLElBQUFBLGFBQWEsRUFBRSx1QkFBU3FDLElBQVQsRUFBZTtBQUMxQixVQUFJM0IsS0FBSyxHQUFHLEtBQUtSLE9BQWpCLENBRDBCLENBRzFCOztBQUNBLFVBQUltQyxJQUFJLENBQUNDLFFBQUwsQ0FBYyxlQUFkLENBQUosRUFBb0M7QUFDaENELFFBQUFBLElBQUksQ0FBQ1IsV0FBTCxDQUFpQixlQUFqQjtBQUNBLGVBQU8sSUFBUDtBQUNILE9BUHlCLENBUzFCOzs7QUFDQSxVQUFJUSxJQUFJLENBQUNYLE1BQUwsR0FBY1YsUUFBZCxDQUF1QixJQUF2QixFQUE2QnVCLE1BQWpDLEVBQXlDO0FBQ3BDO0FBQ0Q3QixRQUFBQSxLQUFLLENBQUNJLElBQU4sQ0FBVyxnQkFBWCxFQUE2QmUsV0FBN0IsQ0FBeUMsZUFBekMsRUFGcUMsQ0FHckM7O0FBQ0FRLFFBQUFBLElBQUksQ0FBQ2xCLFFBQUwsQ0FBYyxlQUFkO0FBQ0EsZUFBTyxLQUFQO0FBQ0g7QUFDSixLQTNFYztBQTZFZnFCLElBQUFBLE1BQU0sRUFBRSxrQkFBVztBQUNmLFdBQUt0QyxPQUFMLENBQWF1QyxHQUFiLENBQWlCLE1BQU01QyxVQUF2QjtBQUNBLFdBQUtLLE9BQUwsQ0FBYXdDLFVBQWIsQ0FBd0I3QyxVQUF4QjtBQUNIO0FBaEZjLEdBQW5COztBQW9GQUosRUFBQUEsQ0FBQyxDQUFDa0QsRUFBRixDQUFLOUMsVUFBTCxJQUFtQixVQUFTTSxPQUFULEVBQWtCO0FBQ2pDLFNBQUt5QyxJQUFMLENBQVUsWUFBWTtBQUNsQixVQUFJQyxFQUFFLEdBQUdwRCxDQUFDLENBQUMsSUFBRCxDQUFWOztBQUNBLFVBQUlvRCxFQUFFLENBQUNDLElBQUgsQ0FBUWpELFVBQVIsQ0FBSixFQUF5QjtBQUNyQmdELFFBQUFBLEVBQUUsQ0FBQ0MsSUFBSCxDQUFRakQsVUFBUixFQUFvQjJDLE1BQXBCO0FBQ0g7O0FBQ0RLLE1BQUFBLEVBQUUsQ0FBQ0MsSUFBSCxDQUFRakQsVUFBUixFQUFvQixJQUFJSSxNQUFKLENBQVcsSUFBWCxFQUFpQkUsT0FBakIsQ0FBcEI7QUFDSCxLQU5EO0FBT0EsV0FBTyxJQUFQO0FBQ0gsR0FURDtBQVdILENBL0dBLEVBK0dFNEMsTUEvR0YsRUErR1VyRCxNQS9HVixFQStHa0JDLFFBL0dsQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBtZXRpc21lbnUgLSB2MS4xLjNcbiAqIEVhc3kgbWVudSBqUXVlcnkgcGx1Z2luIGZvciBUd2l0dGVyIEJvb3RzdHJhcCAzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vb25va3VtdXMvbWV0aXNNZW51XG4gKlxuICogTWFkZSBieSBPc21hbiBOdXJpIE9rdW11c1xuICogVW5kZXIgTUlUIExpY2Vuc2VcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuICAgIHZhciBwbHVnaW5OYW1lID0gXCJtZXRpc01lbnVcIixcbiAgICAgICAgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICB0b2dnbGU6IHRydWUsXG4gICAgICAgICAgICBkb3VibGVUYXBUb0dvOiBmYWxzZVxuICAgICAgICB9O1xuXG4gICAgZnVuY3Rpb24gUGx1Z2luKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgICAgIHRoaXMuX25hbWUgPSBwbHVnaW5OYW1lO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBQbHVnaW4ucHJvdG90eXBlID0ge1xuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgdmFyICR0aGlzID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgICAgICAgICR0b2dnbGUgPSB0aGlzLnNldHRpbmdzLnRvZ2dsZSxcbiAgICAgICAgICAgICAgICBvYmogPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc0lFKCkgPD0gOSkge1xuICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoXCJsaS5hY3RpdmVcIikuaGFzKFwidWxcIikuY2hpbGRyZW4oXCJ1bFwiKS5jb2xsYXBzZShcInNob3dcIik7XG4gICAgICAgICAgICAgICAgJHRoaXMuZmluZChcImxpXCIpLm5vdChcIi5hY3RpdmVcIikuaGFzKFwidWxcIikuY2hpbGRyZW4oXCJ1bFwiKS5jb2xsYXBzZShcImhpZGVcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoXCJsaS5hY3RpdmVcIikuaGFzKFwidWxcIikuY2hpbGRyZW4oXCJ1bFwiKS5hZGRDbGFzcyhcImNvbGxhcHNlIGluXCIpO1xuICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoXCJsaVwiKS5ub3QoXCIuYWN0aXZlXCIpLmhhcyhcInVsXCIpLmNoaWxkcmVuKFwidWxcIikuYWRkQ2xhc3MoXCJjb2xsYXBzZVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9hZGQgdGhlIFwiZG91YmxlVGFwVG9Hb1wiIGNsYXNzIHRvIGFjdGl2ZSBpdGVtcyBpZiBuZWVkZWRcbiAgICAgICAgICAgIGlmIChvYmouc2V0dGluZ3MuZG91YmxlVGFwVG9Hbykge1xuICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoXCJsaS5hY3RpdmVcIikuaGFzKFwidWxcIikuY2hpbGRyZW4oXCJhXCIpLmFkZENsYXNzKFwiZG91YmxlVGFwVG9Hb1wiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHRoaXMuZmluZChcImxpXCIpLmhhcyhcInVsXCIpLmNoaWxkcmVuKFwiYVwiKS5vbihcImNsaWNrXCIgKyBcIi5cIiArIHBsdWdpbk5hbWUsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAvL0RvIHdlIG5lZWQgdG8gZW5hYmxlIHRoZSBkb3VibGUgdGFwXG4gICAgICAgICAgICAgICAgaWYgKG9iai5zZXR0aW5ncy5kb3VibGVUYXBUb0dvKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9pZiB3ZSBoaXQgYSBzZWNvbmQgdGltZSBvbiB0aGUgbGluayBhbmQgdGhlIGhyZWYgaXMgdmFsaWQsIG5hdmlnYXRlIHRvIHRoYXQgdXJsXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouZG91YmxlVGFwVG9HbygkKHRoaXMpKSAmJiAkKHRoaXMpLmF0dHIoXCJocmVmXCIpICE9PSBcIiNcIiAmJiAkKHRoaXMpLmF0dHIoXCJocmVmXCIpICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSAkKHRoaXMpLmF0dHIoXCJocmVmXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoXCJsaVwiKS50b2dnbGVDbGFzcyhcImFjdGl2ZVwiKS5jaGlsZHJlbihcInVsXCIpLmNvbGxhcHNlKFwidG9nZ2xlXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCR0b2dnbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoXCJsaVwiKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLmNoaWxkcmVuKFwidWwuaW5cIikuY29sbGFwc2UoXCJoaWRlXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNJRTogZnVuY3Rpb24oKSB7IC8vaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGFkb2xzZXkvNTI3NjgzXG4gICAgICAgICAgICB2YXIgdW5kZWYsXG4gICAgICAgICAgICAgICAgdiA9IDMsXG4gICAgICAgICAgICAgICAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgICAgICAgICAgICBhbGwgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpXCIpO1xuXG4gICAgICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9IFwiPCEtLVtpZiBndCBJRSBcIiArICgrK3YpICsgXCJdPjxpPjwvaT48IVtlbmRpZl0tLT5cIixcbiAgICAgICAgICAgICAgICBhbGxbMF1cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2ID4gNCA/IHYgOiB1bmRlZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvL0VuYWJsZSB0aGUgbGluayBvbiB0aGUgc2Vjb25kIGNsaWNrLlxuICAgICAgICBkb3VibGVUYXBUb0dvOiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICB2YXIgJHRoaXMgPSB0aGlzLmVsZW1lbnQ7XG5cbiAgICAgICAgICAgIC8vaWYgdGhlIGNsYXNzIFwiZG91YmxlVGFwVG9Hb1wiIGV4aXN0cywgcmVtb3ZlIGl0IGFuZCByZXR1cm5cbiAgICAgICAgICAgIGlmIChlbGVtLmhhc0NsYXNzKFwiZG91YmxlVGFwVG9Hb1wiKSkge1xuICAgICAgICAgICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoXCJkb3VibGVUYXBUb0dvXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL2RvZXMgbm90IGV4aXN0cywgYWRkIGEgbmV3IGNsYXNzIGFuZCByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIGlmIChlbGVtLnBhcmVudCgpLmNoaWxkcmVuKFwidWxcIikubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgIC8vZmlyc3QgcmVtb3ZlIGFsbCBvdGhlciBjbGFzc1xuICAgICAgICAgICAgICAgICR0aGlzLmZpbmQoXCIuZG91YmxlVGFwVG9Hb1wiKS5yZW1vdmVDbGFzcyhcImRvdWJsZVRhcFRvR29cIik7XG4gICAgICAgICAgICAgICAgLy9hZGQgdGhlIGNsYXNzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBlbGVtLmFkZENsYXNzKFwiZG91YmxlVGFwVG9Hb1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vZmYoXCIuXCIgKyBwbHVnaW5OYW1lKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVEYXRhKHBsdWdpbk5hbWUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgJC5mbltwbHVnaW5OYW1lXSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlbCA9ICQodGhpcyk7XG4gICAgICAgICAgICBpZiAoZWwuZGF0YShwbHVnaW5OYW1lKSkge1xuICAgICAgICAgICAgICAgIGVsLmRhdGEocGx1Z2luTmFtZSkucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbC5kYXRhKHBsdWdpbk5hbWUsIG5ldyBQbHVnaW4odGhpcywgb3B0aW9ucykpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxufSkoalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTsiXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL2xpYnMvbWV0aXNNZW51LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/libs/metisMenu.js\n");

/***/ }),

/***/ "./resources/js/libs/scripts.js":
/*!**************************************!*\
  !*** ./resources/js/libs/scripts.js ***!
  \**************************************/
/***/ (() => {

eval("/**\n * Created by edwin on 11/7/15.\n */\n$(document).ready(function () {\n  $('#selectAllBoxes').click(function (event) {\n    if (this.checked) {\n      $('.checkBoxes').each(function () {\n        this.checked = true;\n      });\n    } else {\n      $('.checkBoxes').each(function () {\n        this.checked = false;\n      });\n    }\n  });\n  /**************** User Profile **********************/\n\n  var panels = $('.user-infos');\n  var panelsButton = $('.dropdown-user');\n  panels.hide(); //Click dropdown\n\n  panelsButton.click(function () {\n    //get data-for attribute\n    var dataFor = $(this).attr('data-for');\n    var idFor = $(dataFor); //current button\n\n    var currentButton = $(this);\n    idFor.slideToggle(400, function () {\n      //Completed slidetoggle\n      if (idFor.is(':visible')) {\n        currentButton.html('<i class=\"glyphicon glyphicon-chevron-up text-muted\"></i>');\n      } else {\n        currentButton.html('<i class=\"glyphicon glyphicon-chevron-down text-muted\"></i>');\n      }\n    });\n  });\n  $('[data-toggle=\"tooltip\"]').tooltip(); //$('button').click(function(e) {\n  //    e.preventDefault();\n  //    alert(\"This is a demo.\\n :-)\");\n  //});\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvbGlicy9zY3JpcHRzLmpzP2I4ZTEiXSwibmFtZXMiOlsiJCIsImRvY3VtZW50IiwicmVhZHkiLCJjbGljayIsImV2ZW50IiwiY2hlY2tlZCIsImVhY2giLCJwYW5lbHMiLCJwYW5lbHNCdXR0b24iLCJoaWRlIiwiZGF0YUZvciIsImF0dHIiLCJpZEZvciIsImN1cnJlbnRCdXR0b24iLCJzbGlkZVRvZ2dsZSIsImlzIiwiaHRtbCIsInRvb2x0aXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUVBQSxDQUFDLENBQUNDLFFBQUQsQ0FBRCxDQUFZQyxLQUFaLENBQWtCLFlBQVU7QUFFeEJGLEVBQUFBLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCRyxLQUFyQixDQUEyQixVQUFTQyxLQUFULEVBQWU7QUFFdEMsUUFBRyxLQUFLQyxPQUFSLEVBQWlCO0FBRWJMLE1BQUFBLENBQUMsQ0FBQyxhQUFELENBQUQsQ0FBaUJNLElBQWpCLENBQXNCLFlBQVU7QUFFNUIsYUFBS0QsT0FBTCxHQUFlLElBQWY7QUFFSCxPQUpEO0FBTUgsS0FSRCxNQVFPO0FBR0hMLE1BQUFBLENBQUMsQ0FBQyxhQUFELENBQUQsQ0FBaUJNLElBQWpCLENBQXNCLFlBQVU7QUFFNUIsYUFBS0QsT0FBTCxHQUFlLEtBQWY7QUFFSCxPQUpEO0FBT0g7QUFFSixHQXRCRDtBQTRCQTs7QUFJQSxNQUFJRSxNQUFNLEdBQUdQLENBQUMsQ0FBQyxhQUFELENBQWQ7QUFDQSxNQUFJUSxZQUFZLEdBQUdSLENBQUMsQ0FBQyxnQkFBRCxDQUFwQjtBQUNBTyxFQUFBQSxNQUFNLENBQUNFLElBQVAsR0FwQ3dCLENBc0N4Qjs7QUFDQUQsRUFBQUEsWUFBWSxDQUFDTCxLQUFiLENBQW1CLFlBQVc7QUFDMUI7QUFDQSxRQUFJTyxPQUFPLEdBQUdWLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUVcsSUFBUixDQUFhLFVBQWIsQ0FBZDtBQUNBLFFBQUlDLEtBQUssR0FBR1osQ0FBQyxDQUFDVSxPQUFELENBQWIsQ0FIMEIsQ0FLMUI7O0FBQ0EsUUFBSUcsYUFBYSxHQUFHYixDQUFDLENBQUMsSUFBRCxDQUFyQjtBQUNBWSxJQUFBQSxLQUFLLENBQUNFLFdBQU4sQ0FBa0IsR0FBbEIsRUFBdUIsWUFBVztBQUM5QjtBQUNBLFVBQUdGLEtBQUssQ0FBQ0csRUFBTixDQUFTLFVBQVQsQ0FBSCxFQUNBO0FBQ0lGLFFBQUFBLGFBQWEsQ0FBQ0csSUFBZCxDQUFtQiwyREFBbkI7QUFDSCxPQUhELE1BS0E7QUFDSUgsUUFBQUEsYUFBYSxDQUFDRyxJQUFkLENBQW1CLDZEQUFuQjtBQUNIO0FBQ0osS0FWRDtBQVdILEdBbEJEO0FBcUJBaEIsRUFBQUEsQ0FBQyxDQUFDLHlCQUFELENBQUQsQ0FBNkJpQixPQUE3QixHQTVEd0IsQ0E4RHhCO0FBQ0E7QUFDQTtBQUNBO0FBT0gsQ0F4RUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgZWR3aW4gb24gMTEvNy8xNS5cbiAqL1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpe1xuXG4gICAgJCgnI3NlbGVjdEFsbEJveGVzJykuY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xuXG4gICAgICAgIGlmKHRoaXMuY2hlY2tlZCkge1xuXG4gICAgICAgICAgICAkKCcuY2hlY2tCb3hlcycpLmVhY2goZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cblxuICAgICAgICAgICAgJCgnLmNoZWNrQm94ZXMnKS5lYWNoKGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9XG5cbiAgICB9KTtcblxuXG5cblxuXG4gICAgLyoqKioqKioqKioqKioqKiogVXNlciBQcm9maWxlICoqKioqKioqKioqKioqKioqKioqKiovXG5cblxuXG4gICAgdmFyIHBhbmVscyA9ICQoJy51c2VyLWluZm9zJyk7XG4gICAgdmFyIHBhbmVsc0J1dHRvbiA9ICQoJy5kcm9wZG93bi11c2VyJyk7XG4gICAgcGFuZWxzLmhpZGUoKTtcblxuICAgIC8vQ2xpY2sgZHJvcGRvd25cbiAgICBwYW5lbHNCdXR0b24uY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vZ2V0IGRhdGEtZm9yIGF0dHJpYnV0ZVxuICAgICAgICB2YXIgZGF0YUZvciA9ICQodGhpcykuYXR0cignZGF0YS1mb3InKTtcbiAgICAgICAgdmFyIGlkRm9yID0gJChkYXRhRm9yKTtcblxuICAgICAgICAvL2N1cnJlbnQgYnV0dG9uXG4gICAgICAgIHZhciBjdXJyZW50QnV0dG9uID0gJCh0aGlzKTtcbiAgICAgICAgaWRGb3Iuc2xpZGVUb2dnbGUoNDAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vQ29tcGxldGVkIHNsaWRldG9nZ2xlXG4gICAgICAgICAgICBpZihpZEZvci5pcygnOnZpc2libGUnKSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50QnV0dG9uLmh0bWwoJzxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwIHRleHQtbXV0ZWRcIj48L2k+Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3VycmVudEJ1dHRvbi5odG1sKCc8aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duIHRleHQtbXV0ZWRcIj48L2k+Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSk7XG5cblxuICAgICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS50b29sdGlwKCk7XG5cbiAgICAvLyQoJ2J1dHRvbicpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAvLyAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gICAgYWxlcnQoXCJUaGlzIGlzIGEgZGVtby5cXG4gOi0pXCIpO1xuICAgIC8vfSk7XG5cblxuXG5cblxuXG59KTsiXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL2xpYnMvc2NyaXB0cy5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/libs/scripts.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./resources/js/libs/jquery.js");
/******/ 	__webpack_require__("./resources/js/libs/bootstrap.js");
/******/ 	__webpack_require__("./resources/js/libs/scripts.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/libs/metisMenu.js");
/******/ 	
/******/ })()
;